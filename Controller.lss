
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000dcc  00000e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800122  00800122  00000e82  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000e82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005054  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001943  00000000  00000000  00006158  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bb6  00000000  00000000  00007a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000066c  00000000  00000000  0000a654  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000021b2  00000000  00000000  0000acc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d69  00000000  00000000  0000ce72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000fbdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b8 c0       	rjmp	.+368    	; 0x172 <__ctors_end>
   2:	00 00       	nop
   4:	d3 c0       	rjmp	.+422    	; 0x1ac <__bad_interrupt>
   6:	00 00       	nop
   8:	d1 c0       	rjmp	.+418    	; 0x1ac <__bad_interrupt>
   a:	00 00       	nop
   c:	cf c0       	rjmp	.+414    	; 0x1ac <__bad_interrupt>
   e:	00 00       	nop
  10:	cd c0       	rjmp	.+410    	; 0x1ac <__bad_interrupt>
  12:	00 00       	nop
  14:	cb c0       	rjmp	.+406    	; 0x1ac <__bad_interrupt>
  16:	00 00       	nop
  18:	c9 c0       	rjmp	.+402    	; 0x1ac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c7 c0       	rjmp	.+398    	; 0x1ac <__bad_interrupt>
  1e:	00 00       	nop
  20:	c5 c0       	rjmp	.+394    	; 0x1ac <__bad_interrupt>
  22:	00 00       	nop
  24:	c3 c0       	rjmp	.+390    	; 0x1ac <__bad_interrupt>
  26:	00 00       	nop
  28:	89 c4       	rjmp	.+2322   	; 0x93c <__vector_10>
  2a:	00 00       	nop
  2c:	bf c0       	rjmp	.+382    	; 0x1ac <__bad_interrupt>
  2e:	00 00       	nop
  30:	bd c0       	rjmp	.+378    	; 0x1ac <__bad_interrupt>
  32:	00 00       	nop
  34:	bb c0       	rjmp	.+374    	; 0x1ac <__bad_interrupt>
  36:	00 00       	nop
  38:	b9 c0       	rjmp	.+370    	; 0x1ac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b7 c0       	rjmp	.+366    	; 0x1ac <__bad_interrupt>
  3e:	00 00       	nop
  40:	b5 c0       	rjmp	.+362    	; 0x1ac <__bad_interrupt>
  42:	00 00       	nop
  44:	b3 c0       	rjmp	.+358    	; 0x1ac <__bad_interrupt>
  46:	00 00       	nop
  48:	b1 c0       	rjmp	.+354    	; 0x1ac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	af c0       	rjmp	.+350    	; 0x1ac <__bad_interrupt>
  4e:	00 00       	nop
  50:	ad c0       	rjmp	.+346    	; 0x1ac <__bad_interrupt>
  52:	00 00       	nop
  54:	ab c0       	rjmp	.+342    	; 0x1ac <__bad_interrupt>
  56:	00 00       	nop
  58:	a9 c0       	rjmp	.+338    	; 0x1ac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a7 c0       	rjmp	.+334    	; 0x1ac <__bad_interrupt>
  5e:	00 00       	nop
  60:	a5 c0       	rjmp	.+330    	; 0x1ac <__bad_interrupt>
  62:	00 00       	nop
  64:	a3 c0       	rjmp	.+326    	; 0x1ac <__bad_interrupt>
  66:	00 00       	nop
  68:	a1 c0       	rjmp	.+322    	; 0x1ac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	9f c0       	rjmp	.+318    	; 0x1ac <__bad_interrupt>
  6e:	00 00       	nop
  70:	9d c0       	rjmp	.+314    	; 0x1ac <__bad_interrupt>
  72:	00 00       	nop
  74:	9b c0       	rjmp	.+310    	; 0x1ac <__bad_interrupt>
  76:	00 00       	nop
  78:	99 c0       	rjmp	.+306    	; 0x1ac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	97 c0       	rjmp	.+302    	; 0x1ac <__bad_interrupt>
  7e:	00 00       	nop
  80:	95 c0       	rjmp	.+298    	; 0x1ac <__bad_interrupt>
  82:	00 00       	nop
  84:	93 c0       	rjmp	.+294    	; 0x1ac <__bad_interrupt>
  86:	00 00       	nop
  88:	91 c0       	rjmp	.+290    	; 0x1ac <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8f c0       	rjmp	.+286    	; 0x1ac <__bad_interrupt>
  8e:	00 00       	nop
  90:	8d c0       	rjmp	.+282    	; 0x1ac <__bad_interrupt>
  92:	00 00       	nop
  94:	8b c0       	rjmp	.+278    	; 0x1ac <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	24 03 50 00 4f 00 4b 00 4b 00 45 00 4e 00 20 00     $.P.O.K.K.E.N. .
  a8:	43 00 4f 00 4e 00 54 00 52 00 4f 00 4c 00 4c 00     C.O.N.T.R.O.L.L.
  b8:	45 00 52 00 00 00                                   E.R...

000000be <ManufacturerString>:
  be:	1c 03 48 00 4f 00 52 00 49 00 20 00 43 00 4f 00     ..H.O.R.I. .C.O.
  ce:	2e 00 2c 00 4c 00 54 00 44 00 2e 00 00 00           ..,.L.T.D.....

000000dc <LanguageString>:
  dc:	04 03 09 04                                         ....

000000e0 <ConfigurationDescriptor>:
  e0:	09 02 29 00 01 01 00 80 fa 09 04 00 00 02 03 00     ..).............
  f0:	00 00 09 21 11 01 00 01 22 56 00 07 05 02 03 40     ...!...."V.....@
 100:	00 05 07 05 81 03 40 00 05                          ......@..

00000109 <DeviceDescriptor>:
 109:	12 01 00 02 00 00 00 40 0d 0f 92 00 00 01 01 02     .......@........
 119:	00 01                                               ..

0000011b <JoystickReport>:
 11b:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
 12b:	95 10 05 09 19 01 29 10 81 02 05 01 25 07 46 3b     ......).....%.F;
 13b:	01 75 04 95 01 65 14 09 39 81 42 65 00 95 01 81     .u...e..9.Be....
 14b:	01 26 ff 00 46 ff 00 09 30 09 31 09 32 09 35 75     .&..F...0.1.2.5u
 15b:	08 95 04 81 02 06 00 ff 09 20 95 01 81 02 0a 21     ......... .....!
 16b:	26 95 08 91 02 c0 00                                &......

00000172 <__ctors_end>:
 172:	11 24       	eor	r1, r1
 174:	1f be       	out	0x3f, r1	; 63
 176:	cf ef       	ldi	r28, 0xFF	; 255
 178:	d0 e2       	ldi	r29, 0x20	; 32
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	cd bf       	out	0x3d, r28	; 61

0000017e <__do_copy_data>:
 17e:	11 e0       	ldi	r17, 0x01	; 1
 180:	a0 e0       	ldi	r26, 0x00	; 0
 182:	b1 e0       	ldi	r27, 0x01	; 1
 184:	ec ec       	ldi	r30, 0xCC	; 204
 186:	fd e0       	ldi	r31, 0x0D	; 13
 188:	00 e0       	ldi	r16, 0x00	; 0
 18a:	0b bf       	out	0x3b, r16	; 59
 18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x14>
 18e:	07 90       	elpm	r0, Z+
 190:	0d 92       	st	X+, r0
 192:	a2 32       	cpi	r26, 0x22	; 34
 194:	b1 07       	cpc	r27, r17
 196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0x10>

00000198 <__do_clear_bss>:
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	a2 e2       	ldi	r26, 0x22	; 34
 19c:	b1 e0       	ldi	r27, 0x01	; 1
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
 1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
 1a2:	a6 34       	cpi	r26, 0x46	; 70
 1a4:	b2 07       	cpc	r27, r18
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
 1a8:	4b d1       	rcall	.+662    	; 0x440 <main>
 1aa:	0e c6       	rjmp	.+3100   	; 0xdc8 <_exit>

000001ac <__bad_interrupt>:
 1ac:	29 cf       	rjmp	.-430    	; 0x0 <__vectors>

000001ae <SetupHardware>:
}

// Configures hardware and peripherals, such as the USB peripherals.
void SetupHardware(void) {
	// We need to disable watchdog if enabled by bootloader/fuses.
	MCUSR &= ~(1 << WDRF);
 1ae:	84 b7       	in	r24, 0x34	; 52
 1b0:	87 7f       	andi	r24, 0xF7	; 247
 1b2:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	a8 95       	wdr
 1ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1be:	88 61       	ori	r24, 0x18	; 24
 1c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1c4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1c8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	80 e8       	ldi	r24, 0x80	; 128
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1d6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
                  //We'll just flash all pins on both ports since the UNO R3
	DDRB  = 0xFF; //uses PORTB. Micro can use either or, but both give us 2 LEDs
	PORTB =  0x0; //The ATmega328P on the UNO will be resetting, so unplug it?
	#endif
	// The USB stack should be initialized last.
	USB_Init();
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	94 c3       	rjmp	.+1832   	; 0x906 <USB_Init>

000001de <EVENT_USB_Device_Connect>:
 1de:	08 95       	ret

000001e0 <EVENT_USB_Device_Disconnect>:
 1e0:	08 95       	ret

000001e2 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 1e2:	42 e3       	ldi	r20, 0x32	; 50
 1e4:	60 ec       	ldi	r22, 0xC0	; 192
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	c2 d2       	rcall	.+1412   	; 0x76e <Endpoint_ConfigureEndpoint_Prv>
 1ea:	42 e3       	ldi	r20, 0x32	; 50
 1ec:	61 ec       	ldi	r22, 0xC1	; 193
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	be c2       	rjmp	.+1404   	; 0x76e <Endpoint_ConfigureEndpoint_Prv>

000001f2 <EVENT_USB_Device_ControlRequest>:

	// We can read ConfigSuccess to indicate a success or failure at this point.
}

// Process control requests sent to the device from the USB host.
void EVENT_USB_Device_ControlRequest(void) {
 1f2:	08 95       	ret

000001f4 <GetNextReport>:
int bufindex = 0;
int duration_count = 0;
int portsval = 0;

// Prepare the next report for the host.
void GetNextReport(USB_JoystickReport_Input_t* const ReportData) {
 1f4:	dc 01       	movw	r26, r24

	// Prepare an empty report
	memset(ReportData, 0, sizeof(USB_JoystickReport_Input_t));
 1f6:	98 e0       	ldi	r25, 0x08	; 8
 1f8:	fd 01       	movw	r30, r26
 1fa:	89 2f       	mov	r24, r25
 1fc:	11 92       	st	Z+, r1
 1fe:	8a 95       	dec	r24
 200:	e9 f7       	brne	.-6      	; 0x1fc <GetNextReport+0x8>
	ReportData->LX = STICK_CENTER;
 202:	80 e8       	ldi	r24, 0x80	; 128
 204:	13 96       	adiw	r26, 0x03	; 3
 206:	8c 93       	st	X, r24
 208:	13 97       	sbiw	r26, 0x03	; 3
	ReportData->LY = STICK_CENTER;
 20a:	14 96       	adiw	r26, 0x04	; 4
 20c:	8c 93       	st	X, r24
 20e:	14 97       	sbiw	r26, 0x04	; 4
	ReportData->RX = STICK_CENTER;
 210:	15 96       	adiw	r26, 0x05	; 5
 212:	8c 93       	st	X, r24
 214:	15 97       	sbiw	r26, 0x05	; 5
	ReportData->RY = STICK_CENTER;
 216:	16 96       	adiw	r26, 0x06	; 6
 218:	8c 93       	st	X, r24
 21a:	16 97       	sbiw	r26, 0x06	; 6
	ReportData->HAT = HAT_CENTER;
 21c:	12 96       	adiw	r26, 0x02	; 2
 21e:	9c 93       	st	X, r25
 220:	12 97       	sbiw	r26, 0x02	; 2

	// Repeat ECHOES times the last report
	if (echoes > 0)
 222:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <echoes>
 226:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <echoes+0x1>
 22a:	18 16       	cp	r1, r24
 22c:	19 06       	cpc	r1, r25
 22e:	6c f4       	brge	.+26     	; 0x24a <GetNextReport+0x56>
	{
		memcpy(ReportData, &last_report, sizeof(USB_JoystickReport_Input_t));
 230:	88 e0       	ldi	r24, 0x08	; 8
 232:	e1 e3       	ldi	r30, 0x31	; 49
 234:	f1 e0       	ldi	r31, 0x01	; 1
 236:	01 90       	ld	r0, Z+
 238:	0d 92       	st	X+, r0
 23a:	8a 95       	dec	r24
 23c:	e1 f7       	brne	.-8      	; 0x236 <GetNextReport+0x42>
		echoes--;
 23e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <echoes>
 242:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <echoes+0x1>
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	ae c0       	rjmp	.+348    	; 0x3a6 <GetNextReport+0x1b2>
		return;
	}

	// States and moves management
	switch (state)
 24a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <state>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	c1 f0       	breq	.+48     	; 0x282 <GetNextReport+0x8e>
 252:	68 f4       	brcc	.+26     	; 0x26e <GetNextReport+0x7a>
 254:	88 23       	and	r24, r24
 256:	99 f0       	breq	.+38     	; 0x27e <GetNextReport+0x8a>
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	09 f0       	breq	.+2      	; 0x25e <GetNextReport+0x6a>
 25c:	9a c0       	rjmp	.+308    	; 0x392 <GetNextReport+0x19e>
		case SYNC_CONTROLLER:
			state = BREATHE;
			break;		
            
        case SYNC_POSITION:
			bufindex = 0;
 25e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <bufindex+0x1>
 262:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <bufindex>


			ReportData->Button = 0;
 266:	11 96       	adiw	r26, 0x01	; 1
 268:	1c 92       	st	X, r1
 26a:	1e 92       	st	-X, r1
 26c:	08 c0       	rjmp	.+16     	; 0x27e <GetNextReport+0x8a>
		echoes--;
		return;
	}

	// States and moves management
	switch (state)
 26e:	84 30       	cpi	r24, 0x04	; 4
 270:	09 f4       	brne	.+2      	; 0x274 <GetNextReport+0x80>
 272:	8c c0       	rjmp	.+280    	; 0x38c <GetNextReport+0x198>
 274:	40 f0       	brcs	.+16     	; 0x286 <GetNextReport+0x92>
 276:	85 30       	cpi	r24, 0x05	; 5
 278:	09 f4       	brne	.+2      	; 0x27c <GetNextReport+0x88>
 27a:	99 c0       	rjmp	.+306    	; 0x3ae <GetNextReport+0x1ba>
 27c:	8a c0       	rjmp	.+276    	; 0x392 <GetNextReport+0x19e>
			ReportData->RX = STICK_CENTER;
			ReportData->RY = STICK_CENTER;
			ReportData->HAT = HAT_CENTER;


			state = BREATHE;
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	86 c0       	rjmp	.+268    	; 0x38e <GetNextReport+0x19a>
			break;

		case BREATHE:
			state = PROCESS;
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	84 c0       	rjmp	.+264    	; 0x38e <GetNextReport+0x19a>
			break;

		case PROCESS:

			switch (step[bufindex].button)
 286:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bufindex>
 28a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <bufindex+0x1>
 28e:	fc 01       	movw	r30, r24
 290:	ee 0f       	add	r30, r30
 292:	ff 1f       	adc	r31, r31
 294:	8e 0f       	add	r24, r30
 296:	9f 1f       	adc	r25, r31
 298:	fc 01       	movw	r30, r24
 29a:	e0 50       	subi	r30, 0x00	; 0
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	80 81       	ld	r24, Z
 2a0:	83 30       	cpi	r24, 0x03	; 3
 2a2:	c9 f0       	breq	.+50     	; 0x2d6 <GetNextReport+0xe2>
 2a4:	38 f4       	brcc	.+14     	; 0x2b4 <GetNextReport+0xc0>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	89 f0       	breq	.+34     	; 0x2cc <GetNextReport+0xd8>
 2aa:	60 f4       	brcc	.+24     	; 0x2c4 <GetNextReport+0xd0>
			{

				case UP:
					ReportData->LY = STICK_MIN;				
 2ac:	14 96       	adiw	r26, 0x04	; 4
 2ae:	1c 92       	st	X, r1
 2b0:	14 97       	sbiw	r26, 0x04	; 4
					break;
 2b2:	2e c0       	rjmp	.+92     	; 0x310 <GetNextReport+0x11c>
			state = PROCESS;
			break;

		case PROCESS:

			switch (step[bufindex].button)
 2b4:	85 30       	cpi	r24, 0x05	; 5
 2b6:	c9 f0       	breq	.+50     	; 0x2ea <GetNextReport+0xf6>
 2b8:	98 f0       	brcs	.+38     	; 0x2e0 <GetNextReport+0xec>
 2ba:	86 30       	cpi	r24, 0x06	; 6
 2bc:	d9 f0       	breq	.+54     	; 0x2f4 <GetNextReport+0x100>
 2be:	87 30       	cpi	r24, 0x07	; 7
 2c0:	01 f1       	breq	.+64     	; 0x302 <GetNextReport+0x10e>
 2c2:	26 c0       	rjmp	.+76     	; 0x310 <GetNextReport+0x11c>
				case UP:
					ReportData->LY = STICK_MIN;				
					break;

				case LEFT:
					ReportData->LX = STICK_MIN;				
 2c4:	13 96       	adiw	r26, 0x03	; 3
 2c6:	1c 92       	st	X, r1
 2c8:	13 97       	sbiw	r26, 0x03	; 3
					break;
 2ca:	22 c0       	rjmp	.+68     	; 0x310 <GetNextReport+0x11c>

				case DOWN:
					ReportData->LY = STICK_MAX;				
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	14 96       	adiw	r26, 0x04	; 4
 2d0:	8c 93       	st	X, r24
 2d2:	14 97       	sbiw	r26, 0x04	; 4
					break;
 2d4:	1d c0       	rjmp	.+58     	; 0x310 <GetNextReport+0x11c>

				case RIGHT:
					ReportData->LX = STICK_MAX;				
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	13 96       	adiw	r26, 0x03	; 3
 2da:	8c 93       	st	X, r24
 2dc:	13 97       	sbiw	r26, 0x03	; 3
					break;
 2de:	18 c0       	rjmp	.+48     	; 0x310 <GetNextReport+0x11c>

				case A:
					ReportData->Button |= SWITCH_A;
 2e0:	8d 91       	ld	r24, X+
 2e2:	9c 91       	ld	r25, X
 2e4:	11 97       	sbiw	r26, 0x01	; 1
 2e6:	84 60       	ori	r24, 0x04	; 4
 2e8:	10 c0       	rjmp	.+32     	; 0x30a <GetNextReport+0x116>
					break;

				case B:
					ReportData->Button |= SWITCH_B;
 2ea:	8d 91       	ld	r24, X+
 2ec:	9c 91       	ld	r25, X
 2ee:	11 97       	sbiw	r26, 0x01	; 1
 2f0:	82 60       	ori	r24, 0x02	; 2
 2f2:	0b c0       	rjmp	.+22     	; 0x30a <GetNextReport+0x116>
					break;

                case PLUS:
                    ReportData->Button |= SWITCH_PLUS;
 2f4:	8d 91       	ld	r24, X+
 2f6:	9c 91       	ld	r25, X
 2f8:	11 97       	sbiw	r26, 0x01	; 1
 2fa:	92 60       	ori	r25, 0x02	; 2
 2fc:	11 96       	adiw	r26, 0x01	; 1
 2fe:	9c 93       	st	X, r25
 300:	8e 93       	st	-X, r24

				case SYNC:
					ReportData->Button |= SWITCH_L | SWITCH_R;
 302:	8d 91       	ld	r24, X+
 304:	9c 91       	ld	r25, X
 306:	11 97       	sbiw	r26, 0x01	; 1
 308:	80 63       	ori	r24, 0x30	; 48
 30a:	11 96       	adiw	r26, 0x01	; 1
 30c:	9c 93       	st	X, r25
 30e:	8e 93       	st	-X, r24
					ReportData->RY = STICK_CENTER;
					ReportData->HAT = HAT_CENTER;
					break;
			}

			duration_count++;
 310:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <duration_count>
 314:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <duration_count+0x1>
 318:	2f 5f       	subi	r18, 0xFF	; 255
 31a:	3f 4f       	sbci	r19, 0xFF	; 255
 31c:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <duration_count+0x1>
 320:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <duration_count>

			if (duration_count > step[bufindex].duration)
 324:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bufindex>
 328:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <bufindex+0x1>
 32c:	fc 01       	movw	r30, r24
 32e:	ee 0f       	add	r30, r30
 330:	ff 1f       	adc	r31, r31
 332:	e8 0f       	add	r30, r24
 334:	f9 1f       	adc	r31, r25
 336:	e0 50       	subi	r30, 0x00	; 0
 338:	ff 4f       	sbci	r31, 0xFF	; 255
 33a:	41 81       	ldd	r20, Z+1	; 0x01
 33c:	52 81       	ldd	r21, Z+2	; 0x02
 33e:	42 17       	cp	r20, r18
 340:	53 07       	cpc	r21, r19
 342:	48 f4       	brcc	.+18     	; 0x356 <GetNextReport+0x162>
			{
				bufindex++;
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <bufindex+0x1>
 34a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <bufindex>
				duration_count = 0;				
 34e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <duration_count+0x1>
 352:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <duration_count>
			}


			if (bufindex > (int)( sizeof(step) / sizeof(step[0])) - 1)
 356:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bufindex>
 35a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <bufindex+0x1>
 35e:	0b 97       	sbiw	r24, 0x0b	; 11
 360:	c4 f0       	brlt	.+48     	; 0x392 <GetNextReport+0x19e>
			{

				// state = CLEANUP;

				bufindex = 7;
 362:	87 e0       	ldi	r24, 0x07	; 7
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <bufindex+0x1>
 36a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <bufindex>
				duration_count = 0;
 36e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <duration_count+0x1>
 372:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <duration_count>

				state = BREATHE;
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <state>

				ReportData->LX = STICK_CENTER;
 37c:	80 e8       	ldi	r24, 0x80	; 128
 37e:	13 96       	adiw	r26, 0x03	; 3
 380:	8c 93       	st	X, r24
 382:	13 97       	sbiw	r26, 0x03	; 3
				ReportData->LY = STICK_CENTER;
 384:	14 96       	adiw	r26, 0x04	; 4
 386:	8c 93       	st	X, r24
 388:	14 97       	sbiw	r26, 0x04	; 4
 38a:	03 c0       	rjmp	.+6      	; 0x392 <GetNextReport+0x19e>
			}

			break;

		case CLEANUP:
			state = DONE;
 38c:	85 e0       	ldi	r24, 0x05	; 5
 38e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <state>
	// if (state != SYNC_CONTROLLER && state != SYNC_POSITION)
	// 	if (pgm_read_byte(&(image_data[(xpos / 8) + (ypos * 40)])) & 1 << (xpos % 8))
	// 		ReportData->Button |= SWITCH_A;

	// Prepare to echo this report
	memcpy(&last_report, ReportData, sizeof(USB_JoystickReport_Input_t));
 392:	88 e0       	ldi	r24, 0x08	; 8
 394:	fd 01       	movw	r30, r26
 396:	a1 e3       	ldi	r26, 0x31	; 49
 398:	b1 e0       	ldi	r27, 0x01	; 1
 39a:	01 90       	ld	r0, Z+
 39c:	0d 92       	st	X+, r0
 39e:	8a 95       	dec	r24
 3a0:	e1 f7       	brne	.-8      	; 0x39a <GetNextReport+0x1a6>
	echoes = ECHOES;
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <echoes+0x1>
 3aa:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <echoes>
 3ae:	08 95       	ret

000003b0 <HID_Task>:

	// Not used here, it looks like we don't receive control request from the Switch.
}

// Process and deliver data from IN and OUT endpoints.
void HID_Task(void) {
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	28 97       	sbiw	r28, 0x08	; 8
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	f8 94       	cli
 3be:	de bf       	out	0x3e, r29	; 62
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	cd bf       	out	0x3d, r28	; 61
	// If the device isn't connected and properly configured, we can't do anything here.
	if (USB_DeviceState != DEVICE_STATE_Configured)
 3c4:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>
 3c8:	84 30       	cpi	r24, 0x04	; 4
 3ca:	89 f5       	brne	.+98     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		return;

	// We'll start with the OUT endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_OUT_EPADDR);
	// We'll check to see if we received something on the OUT endpoint.
	if (Endpoint_IsOUTReceived())
 3d6:	82 ff       	sbrs	r24, 2
 3d8:	12 c0       	rjmp	.+36     	; 0x3fe <HID_Task+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 3da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		// If we did, and the packet has data, we'll react to it.
		if (Endpoint_IsReadWriteAllowed())
 3de:	85 ff       	sbrs	r24, 5
 3e0:	09 c0       	rjmp	.+18     	; 0x3f4 <HID_Task+0x44>
		{
			// We'll create a place to store our data received from the host.
			USB_JoystickReport_Output_t JoystickOutputData;
			// We'll then take in that data, setting it up in our storage.
			while(Endpoint_Read_Stream_LE(&JoystickOutputData, sizeof(JoystickOutputData), NULL) != ENDPOINT_RWSTREAM_NoError);
 3e2:	40 e0       	ldi	r20, 0x00	; 0
 3e4:	50 e0       	ldi	r21, 0x00	; 0
 3e6:	67 e0       	ldi	r22, 0x07	; 7
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	ce 01       	movw	r24, r28
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	b8 d0       	rcall	.+368    	; 0x560 <Endpoint_Read_Stream_LE>
 3f0:	81 11       	cpse	r24, r1
 3f2:	f7 cf       	rjmp	.-18     	; 0x3e2 <HID_Task+0x32>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3f8:	8b 77       	andi	r24, 0x7B	; 123
 3fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 404:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	// We'll then move on to the IN endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_IN_EPADDR);
	// We first check to see if the host is ready to accept data.
	if (Endpoint_IsINReady())
 408:	80 ff       	sbrs	r24, 0
 40a:	11 c0       	rjmp	.+34     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	{
		// We'll create an empty report.
		USB_JoystickReport_Input_t JoystickInputData;
		// We'll then populate this report with what we want to send to the host.
		GetNextReport(&JoystickInputData);
 40c:	ce 01       	movw	r24, r28
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	f1 de       	rcall	.-542    	; 0x1f4 <GetNextReport>
		// Once populated, we can output this data to the host. We do this by first writing the data to the control stream.
		while(Endpoint_Write_Stream_LE(&JoystickInputData, sizeof(JoystickInputData), NULL) != ENDPOINT_RWSTREAM_NoError);
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	50 e0       	ldi	r21, 0x00	; 0
 416:	68 e0       	ldi	r22, 0x08	; 8
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	ce 01       	movw	r24, r28
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	56 d0       	rcall	.+172    	; 0x4cc <Endpoint_Write_Stream_LE>
 420:	81 11       	cpse	r24, r1
 422:	f7 cf       	rjmp	.-18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 424:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 428:	8e 77       	andi	r24, 0x7E	; 126
 42a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		// We then send an IN packet on this endpoint.
		Endpoint_ClearIN();
	}
}
 42e:	28 96       	adiw	r28, 0x08	; 8
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	f8 94       	cli
 434:	de bf       	out	0x3e, r29	; 62
 436:	0f be       	out	0x3f, r0	; 63
 438:	cd bf       	out	0x3d, r28	; 61
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <main>:
    { A,          5 }

};

// Main entry point.
int main(void) {
 440:	b6 de       	rcall	.-660    	; 0x1ae <SetupHardware>
 442:	78 94       	sei
 444:	b5 df       	rcall	.-150    	; 0x3b0 <HID_Task>
 446:	a6 d4       	rcall	.+2380   	; 0xd94 <USB_USBTask>
 448:	fd cf       	rjmp	.-6      	; 0x444 <main+0x4>

0000044a <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 44a:	29 2f       	mov	r18, r25
 44c:	33 27       	eor	r19, r19
 44e:	23 30       	cpi	r18, 0x03	; 3
 450:	31 05       	cpc	r19, r1
 452:	e1 f0       	breq	.+56     	; 0x48c <CALLBACK_USB_GetDescriptor+0x42>
 454:	58 f4       	brcc	.+22     	; 0x46c <CALLBACK_USB_GetDescriptor+0x22>
 456:	21 30       	cpi	r18, 0x01	; 1
 458:	31 05       	cpc	r19, r1
 45a:	99 f0       	breq	.+38     	; 0x482 <CALLBACK_USB_GetDescriptor+0x38>
 45c:	22 30       	cpi	r18, 0x02	; 2
 45e:	31 05       	cpc	r19, r1
 460:	69 f5       	brne	.+90     	; 0x4bc <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 462:	89 e2       	ldi	r24, 0x29	; 41
 464:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 466:	20 ee       	ldi	r18, 0xE0	; 224
 468:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 46a:	2c c0       	rjmp	.+88     	; 0x4c4 <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 46c:	21 32       	cpi	r18, 0x21	; 33
 46e:	31 05       	cpc	r19, r1
 470:	01 f1       	breq	.+64     	; 0x4b2 <CALLBACK_USB_GetDescriptor+0x68>
 472:	22 32       	cpi	r18, 0x22	; 34
 474:	31 05       	cpc	r19, r1
 476:	11 f5       	brne	.+68     	; 0x4bc <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
 478:	86 e5       	ldi	r24, 0x56	; 86
 47a:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
 47c:	2b e1       	ldi	r18, 0x1B	; 27
 47e:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(JoystickReport);
			break;
 480:	21 c0       	rjmp	.+66     	; 0x4c4 <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 482:	82 e1       	ldi	r24, 0x12	; 18
 484:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 486:	29 e0       	ldi	r18, 0x09	; 9
 488:	31 e0       	ldi	r19, 0x01	; 1
 48a:	1c c0       	rjmp	.+56     	; 0x4c4 <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 48c:	99 27       	eor	r25, r25
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	91 05       	cpc	r25, r1
 492:	49 f0       	breq	.+18     	; 0x4a6 <CALLBACK_USB_GetDescriptor+0x5c>
 494:	28 f0       	brcs	.+10     	; 0x4a0 <CALLBACK_USB_GetDescriptor+0x56>
 496:	02 97       	sbiw	r24, 0x02	; 2
 498:	89 f4       	brne	.+34     	; 0x4bc <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 49a:	e8 e9       	ldi	r30, 0x98	; 152
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	05 c0       	rjmp	.+10     	; 0x4aa <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 4a0:	ec ed       	ldi	r30, 0xDC	; 220
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 4a6:	ee eb       	ldi	r30, 0xBE	; 190
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 4aa:	84 91       	lpm	r24, Z
 4ac:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 4ae:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <CALLBACK_USB_GetDescriptor+0x7a>
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 4b2:	89 e0       	ldi	r24, 0x09	; 9
 4b4:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
 4b6:	22 ef       	ldi	r18, 0xF2	; 242
 4b8:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <CALLBACK_USB_GetDescriptor+0x7a>
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	90 e0       	ldi	r25, 0x00	; 0
	const void** const DescriptorAddress
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	30 e0       	ldi	r19, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
 4c4:	fa 01       	movw	r30, r20
 4c6:	31 83       	std	Z+1, r19	; 0x01
 4c8:	20 83       	st	Z, r18
	return Size;
}
 4ca:	08 95       	ret

000004cc <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 4cc:	cf 92       	push	r12
 4ce:	df 92       	push	r13
 4d0:	ef 92       	push	r14
 4d2:	ff 92       	push	r15
 4d4:	0f 93       	push	r16
 4d6:	1f 93       	push	r17
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	ec 01       	movw	r28, r24
 4de:	8b 01       	movw	r16, r22
 4e0:	7a 01       	movw	r14, r20
 4e2:	99 d1       	rcall	.+818    	; 0x816 <Endpoint_WaitUntilReady>
 4e4:	81 11       	cpse	r24, r1
 4e6:	33 c0       	rjmp	.+102    	; 0x54e <Endpoint_Write_Stream_LE+0x82>
 4e8:	e1 14       	cp	r14, r1
 4ea:	f1 04       	cpc	r15, r1
 4ec:	39 f0       	breq	.+14     	; 0x4fc <Endpoint_Write_Stream_LE+0x30>
 4ee:	f7 01       	movw	r30, r14
 4f0:	80 81       	ld	r24, Z
 4f2:	91 81       	ldd	r25, Z+1	; 0x01
 4f4:	08 1b       	sub	r16, r24
 4f6:	19 0b       	sbc	r17, r25
 4f8:	c8 0f       	add	r28, r24
 4fa:	d9 1f       	adc	r29, r25
 4fc:	c1 2c       	mov	r12, r1
 4fe:	d1 2c       	mov	r13, r1
 500:	01 15       	cp	r16, r1
 502:	11 05       	cpc	r17, r1
 504:	19 f1       	breq	.+70     	; 0x54c <Endpoint_Write_Stream_LE+0x80>
 506:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 50a:	85 fd       	sbrc	r24, 5
 50c:	16 c0       	rjmp	.+44     	; 0x53a <Endpoint_Write_Stream_LE+0x6e>
 50e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 512:	8e 77       	andi	r24, 0x7E	; 126
 514:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 518:	3d d4       	rcall	.+2170   	; 0xd94 <USB_USBTask>
 51a:	e1 14       	cp	r14, r1
 51c:	f1 04       	cpc	r15, r1
 51e:	49 f0       	breq	.+18     	; 0x532 <Endpoint_Write_Stream_LE+0x66>
 520:	f7 01       	movw	r30, r14
 522:	80 81       	ld	r24, Z
 524:	91 81       	ldd	r25, Z+1	; 0x01
 526:	c8 0e       	add	r12, r24
 528:	d9 1e       	adc	r13, r25
 52a:	d1 82       	std	Z+1, r13	; 0x01
 52c:	c0 82       	st	Z, r12
 52e:	85 e0       	ldi	r24, 0x05	; 5
 530:	0e c0       	rjmp	.+28     	; 0x54e <Endpoint_Write_Stream_LE+0x82>
 532:	71 d1       	rcall	.+738    	; 0x816 <Endpoint_WaitUntilReady>
 534:	88 23       	and	r24, r24
 536:	21 f3       	breq	.-56     	; 0x500 <Endpoint_Write_Stream_LE+0x34>
 538:	0a c0       	rjmp	.+20     	; 0x54e <Endpoint_Write_Stream_LE+0x82>
 53a:	89 91       	ld	r24, Y+
 53c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 540:	01 50       	subi	r16, 0x01	; 1
 542:	11 09       	sbc	r17, r1
 544:	ff ef       	ldi	r31, 0xFF	; 255
 546:	cf 1a       	sub	r12, r31
 548:	df 0a       	sbc	r13, r31
 54a:	da cf       	rjmp	.-76     	; 0x500 <Endpoint_Write_Stream_LE+0x34>
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	1f 91       	pop	r17
 554:	0f 91       	pop	r16
 556:	ff 90       	pop	r15
 558:	ef 90       	pop	r14
 55a:	df 90       	pop	r13
 55c:	cf 90       	pop	r12
 55e:	08 95       	ret

00000560 <Endpoint_Read_Stream_LE>:
 560:	cf 92       	push	r12
 562:	df 92       	push	r13
 564:	ef 92       	push	r14
 566:	ff 92       	push	r15
 568:	0f 93       	push	r16
 56a:	1f 93       	push	r17
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	ec 01       	movw	r28, r24
 572:	8b 01       	movw	r16, r22
 574:	7a 01       	movw	r14, r20
 576:	4f d1       	rcall	.+670    	; 0x816 <Endpoint_WaitUntilReady>
 578:	81 11       	cpse	r24, r1
 57a:	33 c0       	rjmp	.+102    	; 0x5e2 <Endpoint_Read_Stream_LE+0x82>
 57c:	e1 14       	cp	r14, r1
 57e:	f1 04       	cpc	r15, r1
 580:	39 f0       	breq	.+14     	; 0x590 <Endpoint_Read_Stream_LE+0x30>
 582:	f7 01       	movw	r30, r14
 584:	80 81       	ld	r24, Z
 586:	91 81       	ldd	r25, Z+1	; 0x01
 588:	08 1b       	sub	r16, r24
 58a:	19 0b       	sbc	r17, r25
 58c:	c8 0f       	add	r28, r24
 58e:	d9 1f       	adc	r29, r25
 590:	c1 2c       	mov	r12, r1
 592:	d1 2c       	mov	r13, r1
 594:	01 15       	cp	r16, r1
 596:	11 05       	cpc	r17, r1
 598:	19 f1       	breq	.+70     	; 0x5e0 <Endpoint_Read_Stream_LE+0x80>
 59a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 59e:	85 fd       	sbrc	r24, 5
 5a0:	16 c0       	rjmp	.+44     	; 0x5ce <Endpoint_Read_Stream_LE+0x6e>
 5a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5a6:	8b 77       	andi	r24, 0x7B	; 123
 5a8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5ac:	f3 d3       	rcall	.+2022   	; 0xd94 <USB_USBTask>
 5ae:	e1 14       	cp	r14, r1
 5b0:	f1 04       	cpc	r15, r1
 5b2:	49 f0       	breq	.+18     	; 0x5c6 <Endpoint_Read_Stream_LE+0x66>
 5b4:	f7 01       	movw	r30, r14
 5b6:	80 81       	ld	r24, Z
 5b8:	91 81       	ldd	r25, Z+1	; 0x01
 5ba:	c8 0e       	add	r12, r24
 5bc:	d9 1e       	adc	r13, r25
 5be:	d1 82       	std	Z+1, r13	; 0x01
 5c0:	c0 82       	st	Z, r12
 5c2:	85 e0       	ldi	r24, 0x05	; 5
 5c4:	0e c0       	rjmp	.+28     	; 0x5e2 <Endpoint_Read_Stream_LE+0x82>
 5c6:	27 d1       	rcall	.+590    	; 0x816 <Endpoint_WaitUntilReady>
 5c8:	88 23       	and	r24, r24
 5ca:	21 f3       	breq	.-56     	; 0x594 <Endpoint_Read_Stream_LE+0x34>
 5cc:	0a c0       	rjmp	.+20     	; 0x5e2 <Endpoint_Read_Stream_LE+0x82>
 5ce:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 5d2:	89 93       	st	Y+, r24
 5d4:	01 50       	subi	r16, 0x01	; 1
 5d6:	11 09       	sbc	r17, r1
 5d8:	ff ef       	ldi	r31, 0xFF	; 255
 5da:	cf 1a       	sub	r12, r31
 5dc:	df 0a       	sbc	r13, r31
 5de:	da cf       	rjmp	.-76     	; 0x594 <Endpoint_Read_Stream_LE+0x34>
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	1f 91       	pop	r17
 5e8:	0f 91       	pop	r16
 5ea:	ff 90       	pop	r15
 5ec:	ef 90       	pop	r14
 5ee:	df 90       	pop	r13
 5f0:	cf 90       	pop	r12
 5f2:	08 95       	ret

000005f4 <Endpoint_Write_Control_Stream_LE>:
 5f4:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <USB_ControlRequest+0x6>
 5f8:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <USB_ControlRequest+0x7>
 5fc:	26 17       	cp	r18, r22
 5fe:	37 07       	cpc	r19, r23
 600:	48 f0       	brcs	.+18     	; 0x614 <Endpoint_Write_Control_Stream_LE+0x20>
 602:	61 15       	cp	r22, r1
 604:	71 05       	cpc	r23, r1
 606:	39 f4       	brne	.+14     	; 0x616 <Endpoint_Write_Control_Stream_LE+0x22>
 608:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 60c:	2e 77       	andi	r18, 0x7E	; 126
 60e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 612:	01 c0       	rjmp	.+2      	; 0x616 <Endpoint_Write_Control_Stream_LE+0x22>
 614:	b9 01       	movw	r22, r18
 616:	fc 01       	movw	r30, r24
 618:	20 e0       	ldi	r18, 0x00	; 0
 61a:	61 15       	cp	r22, r1
 61c:	71 05       	cpc	r23, r1
 61e:	71 f1       	breq	.+92     	; 0x67c <Endpoint_Write_Control_Stream_LE+0x88>
 620:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>
 624:	88 23       	and	r24, r24
 626:	e9 f1       	breq	.+122    	; 0x6a2 <Endpoint_Write_Control_Stream_LE+0xae>
 628:	85 30       	cpi	r24, 0x05	; 5
 62a:	e9 f1       	breq	.+122    	; 0x6a6 <Endpoint_Write_Control_Stream_LE+0xb2>
 62c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 630:	83 fd       	sbrc	r24, 3
 632:	3b c0       	rjmp	.+118    	; 0x6aa <Endpoint_Write_Control_Stream_LE+0xb6>
 634:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 638:	82 fd       	sbrc	r24, 2
 63a:	2d c0       	rjmp	.+90     	; 0x696 <Endpoint_Write_Control_Stream_LE+0xa2>
 63c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 640:	80 ff       	sbrs	r24, 0
 642:	eb cf       	rjmp	.-42     	; 0x61a <Endpoint_Write_Control_Stream_LE+0x26>
 644:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 648:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 64c:	61 15       	cp	r22, r1
 64e:	71 05       	cpc	r23, r1
 650:	51 f0       	breq	.+20     	; 0x666 <Endpoint_Write_Control_Stream_LE+0x72>
 652:	80 34       	cpi	r24, 0x40	; 64
 654:	91 05       	cpc	r25, r1
 656:	38 f4       	brcc	.+14     	; 0x666 <Endpoint_Write_Control_Stream_LE+0x72>
 658:	21 91       	ld	r18, Z+
 65a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 65e:	61 50       	subi	r22, 0x01	; 1
 660:	71 09       	sbc	r23, r1
 662:	01 96       	adiw	r24, 0x01	; 1
 664:	f3 cf       	rjmp	.-26     	; 0x64c <Endpoint_Write_Control_Stream_LE+0x58>
 666:	21 e0       	ldi	r18, 0x01	; 1
 668:	80 34       	cpi	r24, 0x40	; 64
 66a:	91 05       	cpc	r25, r1
 66c:	09 f0       	breq	.+2      	; 0x670 <Endpoint_Write_Control_Stream_LE+0x7c>
 66e:	20 e0       	ldi	r18, 0x00	; 0
 670:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 674:	8e 77       	andi	r24, 0x7E	; 126
 676:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 67a:	cf cf       	rjmp	.-98     	; 0x61a <Endpoint_Write_Control_Stream_LE+0x26>
 67c:	21 11       	cpse	r18, r1
 67e:	d0 cf       	rjmp	.-96     	; 0x620 <Endpoint_Write_Control_Stream_LE+0x2c>
 680:	0a c0       	rjmp	.+20     	; 0x696 <Endpoint_Write_Control_Stream_LE+0xa2>
 682:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>
 686:	88 23       	and	r24, r24
 688:	61 f0       	breq	.+24     	; 0x6a2 <Endpoint_Write_Control_Stream_LE+0xae>
 68a:	85 30       	cpi	r24, 0x05	; 5
 68c:	61 f0       	breq	.+24     	; 0x6a6 <Endpoint_Write_Control_Stream_LE+0xb2>
 68e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 692:	83 fd       	sbrc	r24, 3
 694:	0a c0       	rjmp	.+20     	; 0x6aa <Endpoint_Write_Control_Stream_LE+0xb6>
 696:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 69a:	82 ff       	sbrs	r24, 2
 69c:	f2 cf       	rjmp	.-28     	; 0x682 <Endpoint_Write_Control_Stream_LE+0x8e>
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	08 95       	ret
 6a2:	82 e0       	ldi	r24, 0x02	; 2
 6a4:	08 95       	ret
 6a6:	83 e0       	ldi	r24, 0x03	; 3
 6a8:	08 95       	ret
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	08 95       	ret

000006ae <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 6ae:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <USB_ControlRequest+0x6>
 6b2:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <USB_ControlRequest+0x7>
 6b6:	26 17       	cp	r18, r22
 6b8:	37 07       	cpc	r19, r23
 6ba:	48 f0       	brcs	.+18     	; 0x6ce <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 6bc:	61 15       	cp	r22, r1
 6be:	71 05       	cpc	r23, r1
 6c0:	39 f4       	brne	.+14     	; 0x6d0 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6c2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6c6:	2e 77       	andi	r18, 0x7E	; 126
 6c8:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <Endpoint_Write_Control_PStream_LE+0x22>
 6ce:	b9 01       	movw	r22, r18
 6d0:	fc 01       	movw	r30, r24
 6d2:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 6d4:	61 15       	cp	r22, r1
 6d6:	71 05       	cpc	r23, r1
 6d8:	89 f1       	breq	.+98     	; 0x73c <Endpoint_Write_Control_PStream_LE+0x8e>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 6da:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 6de:	88 23       	and	r24, r24
 6e0:	09 f4       	brne	.+2      	; 0x6e4 <Endpoint_Write_Control_PStream_LE+0x36>
 6e2:	3f c0       	rjmp	.+126    	; 0x762 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 6e4:	85 30       	cpi	r24, 0x05	; 5
 6e6:	09 f4       	brne	.+2      	; 0x6ea <Endpoint_Write_Control_PStream_LE+0x3c>
 6e8:	3e c0       	rjmp	.+124    	; 0x766 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 6ee:	83 fd       	sbrc	r24, 3
 6f0:	3c c0       	rjmp	.+120    	; 0x76a <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 6f6:	82 fd       	sbrc	r24, 2
 6f8:	2e c0       	rjmp	.+92     	; 0x756 <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 6fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 6fe:	80 ff       	sbrs	r24, 0
 700:	e9 cf       	rjmp	.-46     	; 0x6d4 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 702:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 706:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 70a:	61 15       	cp	r22, r1
 70c:	71 05       	cpc	r23, r1
 70e:	59 f0       	breq	.+22     	; 0x726 <Endpoint_Write_Control_PStream_LE+0x78>
 710:	80 34       	cpi	r24, 0x40	; 64
 712:	91 05       	cpc	r25, r1
 714:	40 f4       	brcc	.+16     	; 0x726 <Endpoint_Write_Control_PStream_LE+0x78>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 716:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 718:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 71c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 71e:	61 50       	subi	r22, 0x01	; 1
 720:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 722:	01 96       	adiw	r24, 0x01	; 1
 724:	f2 cf       	rjmp	.-28     	; 0x70a <Endpoint_Write_Control_PStream_LE+0x5c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 726:	21 e0       	ldi	r18, 0x01	; 1
 728:	80 34       	cpi	r24, 0x40	; 64
 72a:	91 05       	cpc	r25, r1
 72c:	09 f0       	breq	.+2      	; 0x730 <Endpoint_Write_Control_PStream_LE+0x82>
 72e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 730:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 734:	8e 77       	andi	r24, 0x7E	; 126
 736:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 73a:	cc cf       	rjmp	.-104    	; 0x6d4 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 73c:	21 11       	cpse	r18, r1
 73e:	cd cf       	rjmp	.-102    	; 0x6da <Endpoint_Write_Control_PStream_LE+0x2c>
 740:	0a c0       	rjmp	.+20     	; 0x756 <Endpoint_Write_Control_PStream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 742:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 746:	88 23       	and	r24, r24
 748:	61 f0       	breq	.+24     	; 0x762 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 74a:	85 30       	cpi	r24, 0x05	; 5
 74c:	61 f0       	breq	.+24     	; 0x766 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 74e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 752:	83 fd       	sbrc	r24, 3
 754:	0a c0       	rjmp	.+20     	; 0x76a <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 756:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 75a:	82 ff       	sbrs	r24, 2
 75c:	f2 cf       	rjmp	.-28     	; 0x742 <Endpoint_Write_Control_PStream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 762:	82 e0       	ldi	r24, 0x02	; 2
 764:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 766:	83 e0       	ldi	r24, 0x03	; 3
 768:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 76a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 76c:	08 95       	ret

0000076e <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 76e:	98 2f       	mov	r25, r24
 770:	97 30       	cpi	r25, 0x07	; 7
 772:	68 f5       	brcc	.+90     	; 0x7ce <Endpoint_ConfigureEndpoint_Prv+0x60>
 774:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 778:	98 17       	cp	r25, r24
 77a:	39 f0       	breq	.+14     	; 0x78a <Endpoint_ConfigureEndpoint_Prv+0x1c>
 77c:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 780:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 784:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 788:	03 c0       	rjmp	.+6      	; 0x790 <Endpoint_ConfigureEndpoint_Prv+0x22>
 78a:	24 2f       	mov	r18, r20
 78c:	76 2f       	mov	r23, r22
 78e:	50 e0       	ldi	r21, 0x00	; 0
 790:	21 fd       	sbrc	r18, 1
 792:	02 c0       	rjmp	.+4      	; 0x798 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 794:	9f 5f       	subi	r25, 0xFF	; 255
 796:	ec cf       	rjmp	.-40     	; 0x770 <Endpoint_ConfigureEndpoint_Prv+0x2>
 798:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 79c:	3e 7f       	andi	r19, 0xFE	; 254
 79e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 7a2:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 7a6:	3d 7f       	andi	r19, 0xFD	; 253
 7a8:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 7ac:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 7b0:	31 60       	ori	r19, 0x01	; 1
 7b2:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 7b6:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 7ba:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 7be:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 7c2:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 7c6:	27 fd       	sbrc	r18, 7
 7c8:	e5 cf       	rjmp	.-54     	; 0x794 <Endpoint_ConfigureEndpoint_Prv+0x26>
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	08 95       	ret
 7ce:	8f 70       	andi	r24, 0x0F	; 15
 7d0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	08 95       	ret

000007d8 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 7d8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <USB_ControlRequest>
 7dc:	87 ff       	sbrs	r24, 7
 7de:	11 c0       	rjmp	.+34     	; 0x802 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 7e4:	82 fd       	sbrc	r24, 2
 7e6:	05 c0       	rjmp	.+10     	; 0x7f2 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 7e8:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>
 7ec:	81 11       	cpse	r24, r1
 7ee:	f8 cf       	rjmp	.-16     	; 0x7e0 <Endpoint_ClearStatusStage+0x8>
 7f0:	11 c0       	rjmp	.+34     	; 0x814 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 7f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7f6:	8b 77       	andi	r24, 0x7B	; 123
 7f8:	0b c0       	rjmp	.+22     	; 0x810 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 7fa:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>
 7fe:	88 23       	and	r24, r24
 800:	49 f0       	breq	.+18     	; 0x814 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 802:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 806:	80 ff       	sbrs	r24, 0
 808:	f8 cf       	rjmp	.-16     	; 0x7fa <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 80a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 80e:	8e 77       	andi	r24, 0x7E	; 126
 810:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 814:	08 95       	ret

00000816 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 816:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 81a:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 81e:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 820:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 824:	84 2f       	mov	r24, r20
 826:	81 70       	andi	r24, 0x01	; 1
 828:	40 ff       	sbrs	r20, 0
 82a:	23 c0       	rjmp	.+70     	; 0x872 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 82c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 830:	80 fd       	sbrc	r24, 0
 832:	1d c0       	rjmp	.+58     	; 0x86e <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 834:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 838:	88 23       	and	r24, r24
 83a:	99 f0       	breq	.+38     	; 0x862 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 83c:	85 30       	cpi	r24, 0x05	; 5
 83e:	99 f0       	breq	.+38     	; 0x866 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 840:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 844:	85 fd       	sbrc	r24, 5
 846:	11 c0       	rjmp	.+34     	; 0x86a <Endpoint_WaitUntilReady+0x54>
 848:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 84c:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 850:	24 17       	cp	r18, r20
 852:	35 07       	cpc	r19, r21
 854:	29 f3       	breq	.-54     	; 0x820 <Endpoint_WaitUntilReady+0xa>
 856:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 858:	11 f0       	breq	.+4      	; 0x85e <Endpoint_WaitUntilReady+0x48>
 85a:	9a 01       	movw	r18, r20
 85c:	e1 cf       	rjmp	.-62     	; 0x820 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 85e:	84 e0       	ldi	r24, 0x04	; 4
 860:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 862:	82 e0       	ldi	r24, 0x02	; 2
 864:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 866:	83 e0       	ldi	r24, 0x03	; 3
 868:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 86a:	81 e0       	ldi	r24, 0x01	; 1
 86c:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 872:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 876:	42 ff       	sbrs	r20, 2
 878:	dd cf       	rjmp	.-70     	; 0x834 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 87a:	08 95       	ret

0000087c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 87c:	0f 93       	push	r16
 87e:	1f 93       	push	r17
 880:	cf 93       	push	r28
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
 882:	df 93       	push	r29
 884:	4e d0       	rcall	.+156    	; 0x922 <USB_INT_DisableAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 886:	55 d0       	rcall	.+170    	; 0x932 <USB_INT_ClearAllInterrupts>
 888:	c8 ed       	ldi	r28, 0xD8	; 216
 88a:	d0 e0       	ldi	r29, 0x00	; 0
 88c:	88 81       	ld	r24, Y
 88e:	8f 77       	andi	r24, 0x7F	; 127
				USBCON |=  (1 << USBE);
 890:	88 83       	st	Y, r24
 892:	88 81       	ld	r24, Y
 894:	80 68       	ori	r24, 0x80	; 128
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 896:	88 83       	st	Y, r24
 898:	88 81       	ld	r24, Y
 89a:	8f 7d       	andi	r24, 0xDF	; 223

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 89c:	88 83       	st	Y, r24
 89e:	e7 ed       	ldi	r30, 0xD7	; 215
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	80 81       	ld	r24, Z
 8a4:	80 68       	ori	r24, 0x80	; 128
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 8a6:	80 83       	st	Z, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 8a8:	19 bc       	out	0x29, r1	; 41
 8aa:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
 8ae:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 8b2:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 8b6:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 8ba:	00 ee       	ldi	r16, 0xE0	; 224
 8bc:	10 e0       	ldi	r17, 0x00	; 0
 8be:	f8 01       	movw	r30, r16
 8c0:	80 81       	ld	r24, Z
 8c2:	8b 7f       	andi	r24, 0xFB	; 251
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 8c4:	80 83       	st	Z, r24
 8c6:	88 81       	ld	r24, Y
 8c8:	81 60       	ori	r24, 0x01	; 1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 8ca:	88 83       	st	Y, r24
 8cc:	42 e3       	ldi	r20, 0x32	; 50
 8ce:	60 e0       	ldi	r22, 0x00	; 0
 8d0:	80 e0       	ldi	r24, 0x00	; 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 8d2:	4d df       	rcall	.-358    	; 0x76e <Endpoint_ConfigureEndpoint_Prv>
 8d4:	e1 ee       	ldi	r30, 0xE1	; 225
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	80 81       	ld	r24, Z
 8da:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 8dc:	80 83       	st	Z, r24
 8de:	e2 ee       	ldi	r30, 0xE2	; 226
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	80 81       	ld	r24, Z
 8e4:	81 60       	ori	r24, 0x01	; 1
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 8e6:	80 83       	st	Z, r24
 8e8:	80 81       	ld	r24, Z
 8ea:	88 60       	ori	r24, 0x08	; 8
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 8ec:	80 83       	st	Z, r24
 8ee:	f8 01       	movw	r30, r16
 8f0:	80 81       	ld	r24, Z
 8f2:	8e 7f       	andi	r24, 0xFE	; 254

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 8f4:	80 83       	st	Z, r24
 8f6:	88 81       	ld	r24, Y
 8f8:	80 61       	ori	r24, 0x10	; 16
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 8fa:	88 83       	st	Y, r24
 8fc:	df 91       	pop	r29
 8fe:	cf 91       	pop	r28
 900:	1f 91       	pop	r17
 902:	0f 91       	pop	r16
 904:	08 95       	ret

00000906 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 906:	e8 ed       	ldi	r30, 0xD8	; 216
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	80 81       	ld	r24, Z
 90c:	8f 7e       	andi	r24, 0xEF	; 239
 90e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 910:	e7 ed       	ldi	r30, 0xD7	; 215
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 81       	ld	r24, Z
 916:	81 60       	ori	r24, 0x01	; 1
 918:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <USB_IsInitialized>
 920:	ad cf       	rjmp	.-166    	; 0x87c <USB_ResetInterface>

00000922 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 922:	e8 ed       	ldi	r30, 0xD8	; 216
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	80 81       	ld	r24, Z
 928:	8c 7f       	andi	r24, 0xFC	; 252
 92a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 92c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 930:	08 95       	ret

00000932 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 932:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 936:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 93a:	08 95       	ret

0000093c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 93c:	1f 92       	push	r1
 93e:	0f 92       	push	r0
 940:	0f b6       	in	r0, 0x3f	; 63
 942:	0f 92       	push	r0
 944:	11 24       	eor	r1, r1
 946:	0b b6       	in	r0, 0x3b	; 59
 948:	0f 92       	push	r0
 94a:	2f 93       	push	r18
 94c:	3f 93       	push	r19
 94e:	4f 93       	push	r20
 950:	5f 93       	push	r21
 952:	6f 93       	push	r22
 954:	7f 93       	push	r23
 956:	8f 93       	push	r24
 958:	9f 93       	push	r25
 95a:	af 93       	push	r26
 95c:	bf 93       	push	r27
 95e:	ef 93       	push	r30
 960:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 962:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 966:	82 ff       	sbrs	r24, 2
 968:	0a c0       	rjmp	.+20     	; 0x97e <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 96a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 96e:	82 ff       	sbrs	r24, 2
 970:	06 c0       	rjmp	.+12     	; 0x97e <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 972:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 976:	8b 7f       	andi	r24, 0xFB	; 251
 978:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 97c:	0a d2       	rcall	.+1044   	; 0xd92 <USB_Event_Stub>
 97e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 982:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 984:	1d c0       	rjmp	.+58     	; 0x9c0 <__vector_10+0x84>
 986:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 98a:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 98c:	19 c0       	rjmp	.+50     	; 0x9c0 <__vector_10+0x84>
 98e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 992:	8e 7f       	andi	r24, 0xFE	; 254
 994:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 998:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 99c:	80 ff       	sbrs	r24, 0

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 99e:	0c c0       	rjmp	.+24     	; 0x9b8 <__vector_10+0x7c>
 9a0:	84 e1       	ldi	r24, 0x14	; 20
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 9a2:	89 bd       	out	0x29, r24	; 41
 9a4:	86 e1       	ldi	r24, 0x16	; 22
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 9a6:	89 bd       	out	0x29, r24	; 41
 9a8:	09 b4       	in	r0, 0x29	; 41
 9aa:	00 fe       	sbrs	r0, 0
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 9ac:	fd cf       	rjmp	.-6      	; 0x9a8 <__vector_10+0x6c>
 9ae:	81 e0       	ldi	r24, 0x01	; 1
			EVENT_USB_Device_Connect();
 9b0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <USB_DeviceState>
 9b4:	14 dc       	rcall	.-2008   	; 0x1de <EVENT_USB_Device_Connect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <__vector_10+0x84>
			EVENT_USB_Device_Disconnect();
 9b8:	19 bc       	out	0x29, r1	; 41
 9ba:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <USB_DeviceState>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 9be:	10 dc       	rcall	.-2016   	; 0x1e0 <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 9c0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 9c4:	80 ff       	sbrs	r24, 0
 9c6:	18 c0       	rjmp	.+48     	; 0x9f8 <__vector_10+0xbc>
 9c8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 9cc:	80 ff       	sbrs	r24, 0
 9ce:	14 c0       	rjmp	.+40     	; 0x9f8 <__vector_10+0xbc>
 9d0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 9d4:	8e 7f       	andi	r24, 0xFE	; 254
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 9d6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 9da:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 9de:	80 61       	ori	r24, 0x10	; 16
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 9e0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 9e4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 9e8:	80 62       	ori	r24, 0x20	; 32

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 9ea:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		EVENT_USB_Device_Suspend();
 9ee:	19 bc       	out	0x29, r1	; 41
 9f0:	85 e0       	ldi	r24, 0x05	; 5
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 9f2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <USB_DeviceState>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 9f6:	cd d1       	rcall	.+922    	; 0xd92 <USB_Event_Stub>
 9f8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 9fc:	84 ff       	sbrs	r24, 4
 9fe:	2f c0       	rjmp	.+94     	; 0xa5e <__vector_10+0x122>
 a00:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 a04:	84 ff       	sbrs	r24, 4
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 a06:	2b c0       	rjmp	.+86     	; 0xa5e <__vector_10+0x122>
 a08:	84 e1       	ldi	r24, 0x14	; 20
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 a0a:	89 bd       	out	0x29, r24	; 41
 a0c:	86 e1       	ldi	r24, 0x16	; 22
 a0e:	89 bd       	out	0x29, r24	; 41
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 a10:	09 b4       	in	r0, 0x29	; 41
 a12:	00 fe       	sbrs	r0, 0
 a14:	fd cf       	rjmp	.-6      	; 0xa10 <__vector_10+0xd4>
 a16:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 a1a:	8f 7d       	andi	r24, 0xDF	; 223
 a1c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 a20:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 a24:	8f 7e       	andi	r24, 0xEF	; 239
 a26:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 a2a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 a2e:	8f 7e       	andi	r24, 0xEF	; 239
 a30:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a34:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 a38:	81 60       	ori	r24, 0x01	; 1
 a3a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a3e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_Device_ConfigurationNumber>
		  USB_DeviceState = DEVICE_STATE_Configured;
 a42:	88 23       	and	r24, r24
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 a44:	11 f0       	breq	.+4      	; 0xa4a <__vector_10+0x10e>
 a46:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 a48:	07 c0       	rjmp	.+14     	; 0xa58 <__vector_10+0x11c>
 a4a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 a4e:	87 fd       	sbrc	r24, 7
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <__vector_10+0x11a>
 a52:	81 e0       	ldi	r24, 0x01	; 1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 a54:	01 c0       	rjmp	.+2      	; 0xa58 <__vector_10+0x11c>
 a56:	83 e0       	ldi	r24, 0x03	; 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 a58:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <USB_DeviceState>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 a5c:	9a d1       	rcall	.+820    	; 0xd92 <USB_Event_Stub>
 a5e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 a62:	83 ff       	sbrs	r24, 3
 a64:	22 c0       	rjmp	.+68     	; 0xaaa <__vector_10+0x16e>
 a66:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 a6a:	83 ff       	sbrs	r24, 3
 a6c:	1e c0       	rjmp	.+60     	; 0xaaa <__vector_10+0x16e>
 a6e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 a72:	87 7f       	andi	r24, 0xF7	; 247
 a74:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		USB_Device_ConfigurationNumber = 0;
 a78:	82 e0       	ldi	r24, 0x02	; 2
 a7a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <USB_DeviceState>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 a7e:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <USB_Device_ConfigurationNumber>
 a82:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a86:	8e 7f       	andi	r24, 0xFE	; 254
 a88:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 a8c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a90:	8e 7f       	andi	r24, 0xFE	; 254
 a92:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 a96:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a9a:	80 61       	ori	r24, 0x10	; 16
 a9c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 aa0:	42 e3       	ldi	r20, 0x32	; 50
 aa2:	60 e0       	ldi	r22, 0x00	; 0
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 aa4:	80 e0       	ldi	r24, 0x00	; 0
 aa6:	63 de       	rcall	.-826    	; 0x76e <Endpoint_ConfigureEndpoint_Prv>
 aa8:	74 d1       	rcall	.+744    	; 0xd92 <USB_Event_Stub>
 aaa:	ff 91       	pop	r31
 aac:	ef 91       	pop	r30
 aae:	bf 91       	pop	r27
 ab0:	af 91       	pop	r26
 ab2:	9f 91       	pop	r25
 ab4:	8f 91       	pop	r24
 ab6:	7f 91       	pop	r23
 ab8:	6f 91       	pop	r22
 aba:	5f 91       	pop	r21
 abc:	4f 91       	pop	r20
 abe:	3f 91       	pop	r19
 ac0:	2f 91       	pop	r18
 ac2:	0f 90       	pop	r0
 ac4:	0b be       	out	0x3b, r0	; 59
 ac6:	0f 90       	pop	r0
 ac8:	0f be       	out	0x3f, r0	; 63
 aca:	0f 90       	pop	r0
 acc:	1f 90       	pop	r1
 ace:	18 95       	reti

00000ad0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 ad0:	1f 93       	push	r17
 ad2:	cf 93       	push	r28
 ad4:	df 93       	push	r29
 ad6:	cd b7       	in	r28, 0x3d	; 61
 ad8:	de b7       	in	r29, 0x3e	; 62
 ada:	aa 97       	sbiw	r28, 0x2a	; 42
 adc:	0f b6       	in	r0, 0x3f	; 63
 ade:	f8 94       	cli
 ae0:	de bf       	out	0x3e, r29	; 62
 ae2:	0f be       	out	0x3f, r0	; 63
 ae4:	cd bf       	out	0x3d, r28	; 61
 ae6:	ee e3       	ldi	r30, 0x3E	; 62
 ae8:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 aea:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 aee:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 af0:	21 e0       	ldi	r18, 0x01	; 1
 af2:	e6 34       	cpi	r30, 0x46	; 70
 af4:	f2 07       	cpc	r31, r18
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 af6:	c9 f7       	brne	.-14     	; 0xaea <USB_Device_ProcessControlRequest+0x1a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 af8:	7c db       	rcall	.-2312   	; 0x1f2 <EVENT_USB_Device_ControlRequest>
 afa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 afe:	83 ff       	sbrs	r24, 3
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 b00:	30 c1       	rjmp	.+608    	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
 b02:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 b06:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <USB_ControlRequest+0x1>
 b0a:	95 30       	cpi	r25, 0x05	; 5
 b0c:	09 f4       	brne	.+2      	; 0xb10 <USB_Device_ProcessControlRequest+0x40>
 b0e:	83 c0       	rjmp	.+262    	; 0xc16 <USB_Device_ProcessControlRequest+0x146>
 b10:	30 f4       	brcc	.+12     	; 0xb1e <USB_Device_ProcessControlRequest+0x4e>
 b12:	91 30       	cpi	r25, 0x01	; 1
 b14:	a9 f1       	breq	.+106    	; 0xb80 <USB_Device_ProcessControlRequest+0xb0>
 b16:	68 f0       	brcs	.+26     	; 0xb32 <USB_Device_ProcessControlRequest+0x62>
 b18:	93 30       	cpi	r25, 0x03	; 3
 b1a:	91 f1       	breq	.+100    	; 0xb80 <USB_Device_ProcessControlRequest+0xb0>
 b1c:	22 c1       	rjmp	.+580    	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
 b1e:	98 30       	cpi	r25, 0x08	; 8
 b20:	09 f4       	brne	.+2      	; 0xb24 <USB_Device_ProcessControlRequest+0x54>
 b22:	ef c0       	rjmp	.+478    	; 0xd02 <USB_Device_ProcessControlRequest+0x232>
 b24:	99 30       	cpi	r25, 0x09	; 9
 b26:	09 f4       	brne	.+2      	; 0xb2a <USB_Device_ProcessControlRequest+0x5a>
 b28:	fb c0       	rjmp	.+502    	; 0xd20 <USB_Device_ProcessControlRequest+0x250>
 b2a:	96 30       	cpi	r25, 0x06	; 6
 b2c:	09 f0       	breq	.+2      	; 0xb30 <USB_Device_ProcessControlRequest+0x60>
 b2e:	19 c1       	rjmp	.+562    	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b30:	94 c0       	rjmp	.+296    	; 0xc5a <USB_Device_ProcessControlRequest+0x18a>
 b32:	80 38       	cpi	r24, 0x80	; 128
 b34:	21 f0       	breq	.+8      	; 0xb3e <USB_Device_ProcessControlRequest+0x6e>
 b36:	82 38       	cpi	r24, 0x82	; 130
 b38:	09 f0       	breq	.+2      	; 0xb3c <USB_Device_ProcessControlRequest+0x6c>
 b3a:	13 c1       	rjmp	.+550    	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 b3c:	08 c0       	rjmp	.+16     	; 0xb4e <USB_Device_ProcessControlRequest+0x7e>
 b3e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 b42:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <USB_Device_RemoteWakeupEnabled>
 b46:	99 23       	and	r25, r25
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 b48:	89 f0       	breq	.+34     	; 0xb6c <USB_Device_ProcessControlRequest+0x9c>
 b4a:	82 60       	ori	r24, 0x02	; 2
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b4c:	0f c0       	rjmp	.+30     	; 0xb6c <USB_Device_ProcessControlRequest+0x9c>
 b4e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <USB_ControlRequest+0x4>

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 b52:	8f 70       	andi	r24, 0x0F	; 15
 b54:	87 30       	cpi	r24, 0x07	; 7
 b56:	08 f0       	brcs	.+2      	; 0xb5a <USB_Device_ProcessControlRequest+0x8a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b58:	04 c1       	rjmp	.+520    	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
 b5a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 b5e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
 b62:	85 fb       	bst	r24, 5
 b64:	88 27       	eor	r24, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b66:	80 f9       	bld	r24, 0
 b68:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b6c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b70:	97 7f       	andi	r25, 0xF7	; 247
 b72:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 b76:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 b7a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b7e:	cc c0       	rjmp	.+408    	; 0xd18 <USB_Device_ProcessControlRequest+0x248>
 b80:	28 2f       	mov	r18, r24
 b82:	2d 7f       	andi	r18, 0xFD	; 253
 b84:	09 f0       	breq	.+2      	; 0xb88 <USB_Device_ProcessControlRequest+0xb8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 b86:	ed c0       	rjmp	.+474    	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
 b88:	88 23       	and	r24, r24
 b8a:	19 f0       	breq	.+6      	; 0xb92 <USB_Device_ProcessControlRequest+0xc2>
 b8c:	82 30       	cpi	r24, 0x02	; 2
 b8e:	61 f0       	breq	.+24     	; 0xba8 <USB_Device_ProcessControlRequest+0xd8>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 b90:	e8 c0       	rjmp	.+464    	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
 b92:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <USB_ControlRequest+0x2>
 b96:	81 30       	cpi	r24, 0x01	; 1
 b98:	09 f0       	breq	.+2      	; 0xb9c <USB_Device_ProcessControlRequest+0xcc>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 b9a:	e3 c0       	rjmp	.+454    	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
 b9c:	93 30       	cpi	r25, 0x03	; 3
 b9e:	09 f0       	breq	.+2      	; 0xba2 <USB_Device_ProcessControlRequest+0xd2>
 ba0:	80 e0       	ldi	r24, 0x00	; 0
 ba2:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <USB_Device_RemoteWakeupEnabled>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 ba6:	2e c0       	rjmp	.+92     	; 0xc04 <USB_Device_ProcessControlRequest+0x134>
 ba8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <USB_ControlRequest+0x2>
 bac:	81 11       	cpse	r24, r1
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 bae:	2a c0       	rjmp	.+84     	; 0xc04 <USB_Device_ProcessControlRequest+0x134>
 bb0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <USB_ControlRequest+0x4>

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 bb4:	8f 70       	andi	r24, 0x0F	; 15
 bb6:	2f ef       	ldi	r18, 0xFF	; 255
 bb8:	28 0f       	add	r18, r24
 bba:	26 30       	cpi	r18, 0x06	; 6
 bbc:	08 f0       	brcs	.+2      	; 0xbc0 <USB_Device_ProcessControlRequest+0xf0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bbe:	d1 c0       	rjmp	.+418    	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
 bc0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 bc4:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 bc8:	20 ff       	sbrs	r18, 0
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 bca:	1c c0       	rjmp	.+56     	; 0xc04 <USB_Device_ProcessControlRequest+0x134>
 bcc:	93 30       	cpi	r25, 0x03	; 3
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 bce:	21 f4       	brne	.+8      	; 0xbd8 <USB_Device_ProcessControlRequest+0x108>
 bd0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 bd4:	80 62       	ori	r24, 0x20	; 32
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 bd6:	14 c0       	rjmp	.+40     	; 0xc00 <USB_Device_ProcessControlRequest+0x130>
 bd8:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 bdc:	90 61       	ori	r25, 0x10	; 16
 bde:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 be2:	21 e0       	ldi	r18, 0x01	; 1
 be4:	30 e0       	ldi	r19, 0x00	; 0
 be6:	a9 01       	movw	r20, r18
 be8:	02 c0       	rjmp	.+4      	; 0xbee <USB_Device_ProcessControlRequest+0x11e>
 bea:	44 0f       	add	r20, r20
 bec:	55 1f       	adc	r21, r21
 bee:	8a 95       	dec	r24
 bf0:	e2 f7       	brpl	.-8      	; 0xbea <USB_Device_ProcessControlRequest+0x11a>
 bf2:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 bf6:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 bfa:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 bfe:	88 60       	ori	r24, 0x08	; 8
 c00:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c04:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c0c:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 c0e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c12:	e2 dd       	rcall	.-1084   	; 0x7d8 <Endpoint_ClearStatusStage>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c14:	a6 c0       	rjmp	.+332    	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
 c16:	81 11       	cpse	r24, r1
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 c18:	a4 c0       	rjmp	.+328    	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
 c1a:	10 91 40 01 	lds	r17, 0x0140	; 0x800140 <USB_ControlRequest+0x2>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 c1e:	1f 77       	andi	r17, 0x7F	; 127
 c20:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 c24:	80 78       	andi	r24, 0x80	; 128
 c26:	81 2b       	or	r24, r17
 c28:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 c2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c30:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 c32:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 c36:	d0 dd       	rcall	.-1120   	; 0x7d8 <Endpoint_ClearStatusStage>
 c38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 c3c:	80 ff       	sbrs	r24, 0
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 c3e:	fc cf       	rjmp	.-8      	; 0xc38 <USB_Device_ProcessControlRequest+0x168>
 c40:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 c44:	80 68       	ori	r24, 0x80	; 128
 c46:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 c4a:	11 11       	cpse	r17, r1
 c4c:	02 c0       	rjmp	.+4      	; 0xc52 <USB_Device_ProcessControlRequest+0x182>
 c4e:	82 e0       	ldi	r24, 0x02	; 2
 c50:	01 c0       	rjmp	.+2      	; 0xc54 <USB_Device_ProcessControlRequest+0x184>
 c52:	83 e0       	ldi	r24, 0x03	; 3
 c54:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <USB_DeviceState>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c58:	84 c0       	rjmp	.+264    	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
 c5a:	80 58       	subi	r24, 0x80	; 128
 c5c:	82 30       	cpi	r24, 0x02	; 2
 c5e:	08 f0       	brcs	.+2      	; 0xc62 <USB_Device_ProcessControlRequest+0x192>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 c60:	80 c0       	rjmp	.+256    	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
 c62:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <USB_ControlRequest+0x2>
 c66:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <USB_ControlRequest+0x3>
 c6a:	8c 3d       	cpi	r24, 0xDC	; 220
 c6c:	53 e0       	ldi	r21, 0x03	; 3
 c6e:	95 07       	cpc	r25, r21
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 c70:	71 f5       	brne	.+92     	; 0xcce <USB_Device_ProcessControlRequest+0x1fe>
 c72:	83 e0       	ldi	r24, 0x03	; 3
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 c74:	8a 83       	std	Y+2, r24	; 0x02
 c76:	8a e2       	ldi	r24, 0x2A	; 42
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 c78:	89 83       	std	Y+1, r24	; 0x01
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 c7a:	4f b7       	in	r20, 0x3f	; 63
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 c7c:	f8 94       	cli
 c7e:	de 01       	movw	r26, r28
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c80:	13 96       	adiw	r26, 0x03	; 3
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 c82:	20 e0       	ldi	r18, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 c84:	3e e0       	ldi	r19, 0x0E	; 14
 c86:	51 e2       	ldi	r21, 0x21	; 33
 c88:	e3 2f       	mov	r30, r19
 c8a:	f0 e0       	ldi	r31, 0x00	; 0
 c8c:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>

					if (SerialCharNum & 0x01)
 c90:	e4 91       	lpm	r30, Z
 c92:	20 ff       	sbrs	r18, 0
					{
						SerialByte >>= 4;
 c94:	03 c0       	rjmp	.+6      	; 0xc9c <USB_Device_ProcessControlRequest+0x1cc>
 c96:	e2 95       	swap	r30
						SigReadAddress++;
 c98:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
 c9a:	3f 5f       	subi	r19, 0xFF	; 255
 c9c:	ef 70       	andi	r30, 0x0F	; 15
 c9e:	8e 2f       	mov	r24, r30

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 ca0:	90 e0       	ldi	r25, 0x00	; 0
 ca2:	ea 30       	cpi	r30, 0x0A	; 10
 ca4:	10 f0       	brcs	.+4      	; 0xcaa <USB_Device_ProcessControlRequest+0x1da>
 ca6:	c7 96       	adiw	r24, 0x37	; 55
 ca8:	01 c0       	rjmp	.+2      	; 0xcac <USB_Device_ProcessControlRequest+0x1dc>
 caa:	c0 96       	adiw	r24, 0x30	; 48
 cac:	8d 93       	st	X+, r24
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 cae:	9d 93       	st	X+, r25
 cb0:	2f 5f       	subi	r18, 0xFF	; 255
 cb2:	24 31       	cpi	r18, 0x14	; 20
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 cb4:	49 f7       	brne	.-46     	; 0xc88 <USB_Device_ProcessControlRequest+0x1b8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cb6:	4f bf       	out	0x3f, r20	; 63
 cb8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cbc:	87 7f       	andi	r24, 0xF7	; 247
 cbe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 cc2:	6a e2       	ldi	r22, 0x2A	; 42
 cc4:	70 e0       	ldi	r23, 0x00	; 0
 cc6:	ce 01       	movw	r24, r28
 cc8:	01 96       	adiw	r24, 0x01	; 1
 cca:	94 dc       	rcall	.-1752   	; 0x5f4 <Endpoint_Write_Control_Stream_LE>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 ccc:	14 c0       	rjmp	.+40     	; 0xcf6 <USB_Device_ProcessControlRequest+0x226>
 cce:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <USB_ControlRequest+0x4>
 cd2:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <USB_ControlRequest+0x5>
 cd6:	ae 01       	movw	r20, r28
 cd8:	4f 5f       	subi	r20, 0xFF	; 255
 cda:	5f 4f       	sbci	r21, 0xFF	; 255
 cdc:	b6 db       	rcall	.-2196   	; 0x44a <CALLBACK_USB_GetDescriptor>
 cde:	bc 01       	movw	r22, r24
 ce0:	89 2b       	or	r24, r25
 ce2:	09 f4       	brne	.+2      	; 0xce6 <USB_Device_ProcessControlRequest+0x216>
 ce4:	3e c0       	rjmp	.+124    	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
 ce6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cea:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 cec:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cf0:	89 81       	ldd	r24, Y+1	; 0x01
 cf2:	9a 81       	ldd	r25, Y+2	; 0x02
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 cf4:	dc dc       	rcall	.-1608   	; 0x6ae <Endpoint_Write_Control_PStream_LE>
 cf6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cfa:	8b 77       	andi	r24, 0x7B	; 123
 cfc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 d00:	30 c0       	rjmp	.+96     	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
 d02:	80 38       	cpi	r24, 0x80	; 128
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d04:	71 f5       	brne	.+92     	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
 d06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d0a:	87 7f       	andi	r24, 0xF7	; 247
 d0c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 d10:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d14:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d1c:	8e 77       	andi	r24, 0x7E	; 126
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 d1e:	77 cf       	rjmp	.-274    	; 0xc0e <USB_Device_ProcessControlRequest+0x13e>
 d20:	81 11       	cpse	r24, r1
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 d22:	1f c0       	rjmp	.+62     	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
 d24:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <USB_ControlRequest+0x2>
 d28:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <USB_ControlRequest+0x3>
 d2c:	99 27       	eor	r25, r25
 d2e:	02 97       	sbiw	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d30:	c4 f4       	brge	.+48     	; 0xd62 <USB_Device_ProcessControlRequest+0x292>
 d32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d36:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 d38:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d3c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <USB_ControlRequest+0x2>

	Endpoint_ClearStatusStage();
 d40:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <USB_Device_ConfigurationNumber>

	if (USB_Device_ConfigurationNumber)
 d44:	49 dd       	rcall	.-1390   	; 0x7d8 <Endpoint_ClearStatusStage>
 d46:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_Device_ConfigurationNumber>
 d4a:	81 11       	cpse	r24, r1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 d4c:	06 c0       	rjmp	.+12     	; 0xd5a <USB_Device_ProcessControlRequest+0x28a>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 d4e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 d52:	87 fd       	sbrc	r24, 7
 d54:	02 c0       	rjmp	.+4      	; 0xd5a <USB_Device_ProcessControlRequest+0x28a>
 d56:	81 e0       	ldi	r24, 0x01	; 1
 d58:	01 c0       	rjmp	.+2      	; 0xd5c <USB_Device_ProcessControlRequest+0x28c>

	EVENT_USB_Device_ConfigurationChanged();
 d5a:	84 e0       	ldi	r24, 0x04	; 4
 d5c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <USB_DeviceState>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d60:	40 da       	rcall	.-2944   	; 0x1e2 <EVENT_USB_Device_ConfigurationChanged>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 d62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d66:	83 ff       	sbrs	r24, 3
 d68:	0a c0       	rjmp	.+20     	; 0xd7e <USB_Device_ProcessControlRequest+0x2ae>
 d6a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d6e:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 d70:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d74:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 d78:	80 62       	ori	r24, 0x20	; 32
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 d7a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 d7e:	aa 96       	adiw	r28, 0x2a	; 42
 d80:	0f b6       	in	r0, 0x3f	; 63
 d82:	f8 94       	cli
 d84:	de bf       	out	0x3e, r29	; 62
 d86:	0f be       	out	0x3f, r0	; 63
 d88:	cd bf       	out	0x3d, r28	; 61
 d8a:	df 91       	pop	r29
 d8c:	cf 91       	pop	r28
 d8e:	1f 91       	pop	r17
 d90:	08 95       	ret

00000d92 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 d92:	08 95       	ret

00000d94 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 d94:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 d96:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>
 d9a:	88 23       	and	r24, r24
 d9c:	99 f0       	breq	.+38     	; 0xdc4 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d9e:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 da2:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 da4:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 da8:	89 2f       	mov	r24, r25
 daa:	81 70       	andi	r24, 0x01	; 1
 dac:	90 fd       	sbrc	r25, 0
 dae:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 db0:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 db2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 db6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
 dba:	83 fd       	sbrc	r24, 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 dbc:	89 de       	rcall	.-750    	; 0xad0 <USB_Device_ProcessControlRequest>
 dbe:	cf 70       	andi	r28, 0x0F	; 15
 dc0:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 dc4:	cf 91       	pop	r28
 dc6:	08 95       	ret

00000dc8 <_exit>:
 dc8:	f8 94       	cli

00000dca <__stop_program>:
 dca:	ff cf       	rjmp	.-2      	; 0xdca <__stop_program>
