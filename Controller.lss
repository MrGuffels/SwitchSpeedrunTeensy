
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  00000eb0  00000f44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  008001ba  008001ba  00000ffe  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000ffe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001010  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005094  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001943  00000000  00000000  00006314  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c3f  00000000  00000000  00007c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000066c  00000000  00000000  0000a898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000021e0  00000000  00000000  0000af04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d69  00000000  00000000  0000d0e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000fe4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b8 c0       	rjmp	.+368    	; 0x172 <__ctors_end>
   2:	00 00       	nop
   4:	d3 c0       	rjmp	.+422    	; 0x1ac <__bad_interrupt>
   6:	00 00       	nop
   8:	d1 c0       	rjmp	.+418    	; 0x1ac <__bad_interrupt>
   a:	00 00       	nop
   c:	cf c0       	rjmp	.+414    	; 0x1ac <__bad_interrupt>
   e:	00 00       	nop
  10:	cd c0       	rjmp	.+410    	; 0x1ac <__bad_interrupt>
  12:	00 00       	nop
  14:	cb c0       	rjmp	.+406    	; 0x1ac <__bad_interrupt>
  16:	00 00       	nop
  18:	c9 c0       	rjmp	.+402    	; 0x1ac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c7 c0       	rjmp	.+398    	; 0x1ac <__bad_interrupt>
  1e:	00 00       	nop
  20:	c5 c0       	rjmp	.+394    	; 0x1ac <__bad_interrupt>
  22:	00 00       	nop
  24:	c3 c0       	rjmp	.+390    	; 0x1ac <__bad_interrupt>
  26:	00 00       	nop
  28:	fb c4       	rjmp	.+2550   	; 0xa20 <__vector_10>
  2a:	00 00       	nop
  2c:	bf c0       	rjmp	.+382    	; 0x1ac <__bad_interrupt>
  2e:	00 00       	nop
  30:	bd c0       	rjmp	.+378    	; 0x1ac <__bad_interrupt>
  32:	00 00       	nop
  34:	bb c0       	rjmp	.+374    	; 0x1ac <__bad_interrupt>
  36:	00 00       	nop
  38:	b9 c0       	rjmp	.+370    	; 0x1ac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b7 c0       	rjmp	.+366    	; 0x1ac <__bad_interrupt>
  3e:	00 00       	nop
  40:	b5 c0       	rjmp	.+362    	; 0x1ac <__bad_interrupt>
  42:	00 00       	nop
  44:	b3 c0       	rjmp	.+358    	; 0x1ac <__bad_interrupt>
  46:	00 00       	nop
  48:	b1 c0       	rjmp	.+354    	; 0x1ac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	af c0       	rjmp	.+350    	; 0x1ac <__bad_interrupt>
  4e:	00 00       	nop
  50:	ad c0       	rjmp	.+346    	; 0x1ac <__bad_interrupt>
  52:	00 00       	nop
  54:	ab c0       	rjmp	.+342    	; 0x1ac <__bad_interrupt>
  56:	00 00       	nop
  58:	a9 c0       	rjmp	.+338    	; 0x1ac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a7 c0       	rjmp	.+334    	; 0x1ac <__bad_interrupt>
  5e:	00 00       	nop
  60:	a5 c0       	rjmp	.+330    	; 0x1ac <__bad_interrupt>
  62:	00 00       	nop
  64:	a3 c0       	rjmp	.+326    	; 0x1ac <__bad_interrupt>
  66:	00 00       	nop
  68:	a1 c0       	rjmp	.+322    	; 0x1ac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	9f c0       	rjmp	.+318    	; 0x1ac <__bad_interrupt>
  6e:	00 00       	nop
  70:	9d c0       	rjmp	.+314    	; 0x1ac <__bad_interrupt>
  72:	00 00       	nop
  74:	9b c0       	rjmp	.+310    	; 0x1ac <__bad_interrupt>
  76:	00 00       	nop
  78:	99 c0       	rjmp	.+306    	; 0x1ac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	97 c0       	rjmp	.+302    	; 0x1ac <__bad_interrupt>
  7e:	00 00       	nop
  80:	95 c0       	rjmp	.+298    	; 0x1ac <__bad_interrupt>
  82:	00 00       	nop
  84:	93 c0       	rjmp	.+294    	; 0x1ac <__bad_interrupt>
  86:	00 00       	nop
  88:	91 c0       	rjmp	.+290    	; 0x1ac <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8f c0       	rjmp	.+286    	; 0x1ac <__bad_interrupt>
  8e:	00 00       	nop
  90:	8d c0       	rjmp	.+282    	; 0x1ac <__bad_interrupt>
  92:	00 00       	nop
  94:	8b c0       	rjmp	.+278    	; 0x1ac <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	24 03 50 00 4f 00 4b 00 4b 00 45 00 4e 00 20 00     $.P.O.K.K.E.N. .
  a8:	43 00 4f 00 4e 00 54 00 52 00 4f 00 4c 00 4c 00     C.O.N.T.R.O.L.L.
  b8:	45 00 52 00 00 00                                   E.R...

000000be <ManufacturerString>:
  be:	1c 03 48 00 4f 00 52 00 49 00 20 00 43 00 4f 00     ..H.O.R.I. .C.O.
  ce:	2e 00 2c 00 4c 00 54 00 44 00 2e 00 00 00           ..,.L.T.D.....

000000dc <LanguageString>:
  dc:	04 03 09 04                                         ....

000000e0 <ConfigurationDescriptor>:
  e0:	09 02 29 00 01 01 00 80 fa 09 04 00 00 02 03 00     ..).............
  f0:	00 00 09 21 11 01 00 01 22 56 00 07 05 02 03 40     ...!...."V.....@
 100:	00 05 07 05 81 03 40 00 05                          ......@..

00000109 <DeviceDescriptor>:
 109:	12 01 00 02 00 00 00 40 0d 0f 92 00 00 01 01 02     .......@........
 119:	00 01                                               ..

0000011b <JoystickReport>:
 11b:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
 12b:	95 10 05 09 19 01 29 10 81 02 05 01 25 07 46 3b     ......).....%.F;
 13b:	01 75 04 95 01 65 14 09 39 81 42 65 00 95 01 81     .u...e..9.Be....
 14b:	01 26 ff 00 46 ff 00 09 30 09 31 09 32 09 35 75     .&..F...0.1.2.5u
 15b:	08 95 04 81 02 06 00 ff 09 20 95 01 81 02 0a 21     ......... .....!
 16b:	26 95 08 91 02 c0 00                                &......

00000172 <__ctors_end>:
 172:	11 24       	eor	r1, r1
 174:	1f be       	out	0x3f, r1	; 63
 176:	cf ef       	ldi	r28, 0xFF	; 255
 178:	d0 e2       	ldi	r29, 0x20	; 32
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	cd bf       	out	0x3d, r28	; 61

0000017e <__do_copy_data>:
 17e:	11 e0       	ldi	r17, 0x01	; 1
 180:	a0 e0       	ldi	r26, 0x00	; 0
 182:	b1 e0       	ldi	r27, 0x01	; 1
 184:	e0 eb       	ldi	r30, 0xB0	; 176
 186:	fe e0       	ldi	r31, 0x0E	; 14
 188:	00 e0       	ldi	r16, 0x00	; 0
 18a:	0b bf       	out	0x3b, r16	; 59
 18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x14>
 18e:	07 90       	elpm	r0, Z+
 190:	0d 92       	st	X+, r0
 192:	aa 3b       	cpi	r26, 0xBA	; 186
 194:	b1 07       	cpc	r27, r17
 196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0x10>

00000198 <__do_clear_bss>:
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	aa eb       	ldi	r26, 0xBA	; 186
 19c:	b1 e0       	ldi	r27, 0x01	; 1
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
 1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
 1a2:	ae 3d       	cpi	r26, 0xDE	; 222
 1a4:	b2 07       	cpc	r27, r18
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
 1a8:	bd d1       	rcall	.+890    	; 0x524 <main>
 1aa:	80 c6       	rjmp	.+3328   	; 0xeac <_exit>

000001ac <__bad_interrupt>:
 1ac:	29 cf       	rjmp	.-430    	; 0x0 <__vectors>

000001ae <SetupHardware>:
}

// Configures hardware and peripherals, such as the USB peripherals.
void SetupHardware(void) {
	// We need to disable watchdog if enabled by bootloader/fuses.
	MCUSR &= ~(1 << WDRF);
 1ae:	84 b7       	in	r24, 0x34	; 52
 1b0:	87 7f       	andi	r24, 0xF7	; 247
 1b2:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	a8 95       	wdr
 1ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1be:	88 61       	ori	r24, 0x18	; 24
 1c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1c4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1c8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	80 e8       	ldi	r24, 0x80	; 128
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1d6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
                  //We'll just flash all pins on both ports since the UNO R3
	DDRB  = 0xFF; //uses PORTB. Micro can use either or, but both give us 2 LEDs
	PORTB =  0x0; //The ATmega328P on the UNO will be resetting, so unplug it?
	#endif
	// The USB stack should be initialized last.
	USB_Init();
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	06 c4       	rjmp	.+2060   	; 0x9ea <USB_Init>

000001de <EVENT_USB_Device_Connect>:
 1de:	08 95       	ret

000001e0 <EVENT_USB_Device_Disconnect>:
 1e0:	08 95       	ret

000001e2 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 1e2:	42 e3       	ldi	r20, 0x32	; 50
 1e4:	60 ec       	ldi	r22, 0xC0	; 192
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	34 d3       	rcall	.+1640   	; 0x852 <Endpoint_ConfigureEndpoint_Prv>
 1ea:	42 e3       	ldi	r20, 0x32	; 50
 1ec:	61 ec       	ldi	r22, 0xC1	; 193
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	30 c3       	rjmp	.+1632   	; 0x852 <Endpoint_ConfigureEndpoint_Prv>

000001f2 <EVENT_USB_Device_ControlRequest>:

	// We can read ConfigSuccess to indicate a success or failure at this point.
}

// Process control requests sent to the device from the USB host.
void EVENT_USB_Device_ControlRequest(void) {
 1f2:	08 95       	ret

000001f4 <GetNextReport>:
int bufindex = 0;
int duration_count = 0;
int portsval = 0;

// Prepare the next report for the host.
void GetNextReport(USB_JoystickReport_Input_t* const ReportData) {
 1f4:	dc 01       	movw	r26, r24

	// Prepare an empty report
	memset(ReportData, 0, sizeof(USB_JoystickReport_Input_t));
 1f6:	98 e0       	ldi	r25, 0x08	; 8
 1f8:	fd 01       	movw	r30, r26
 1fa:	89 2f       	mov	r24, r25
 1fc:	11 92       	st	Z+, r1
 1fe:	8a 95       	dec	r24
 200:	e9 f7       	brne	.-6      	; 0x1fc <GetNextReport+0x8>
	ReportData->LX = STICK_CENTER;
 202:	80 e8       	ldi	r24, 0x80	; 128
 204:	13 96       	adiw	r26, 0x03	; 3
 206:	8c 93       	st	X, r24
 208:	13 97       	sbiw	r26, 0x03	; 3
	ReportData->LY = STICK_CENTER;
 20a:	14 96       	adiw	r26, 0x04	; 4
 20c:	8c 93       	st	X, r24
 20e:	14 97       	sbiw	r26, 0x04	; 4
	ReportData->RX = STICK_CENTER;
 210:	15 96       	adiw	r26, 0x05	; 5
 212:	8c 93       	st	X, r24
 214:	15 97       	sbiw	r26, 0x05	; 5
	ReportData->RY = STICK_CENTER;
 216:	16 96       	adiw	r26, 0x06	; 6
 218:	8c 93       	st	X, r24
 21a:	16 97       	sbiw	r26, 0x06	; 6
	ReportData->HAT = HAT_CENTER;
 21c:	12 96       	adiw	r26, 0x02	; 2
 21e:	9c 93       	st	X, r25
 220:	12 97       	sbiw	r26, 0x02	; 2

	// Repeat ECHOES times the last report
	if (echoes > 0)
 222:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <echoes>
 226:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <echoes+0x1>
 22a:	18 16       	cp	r1, r24
 22c:	19 06       	cpc	r1, r25
 22e:	6c f4       	brge	.+26     	; 0x24a <GetNextReport+0x56>
	{
		memcpy(ReportData, &last_report, sizeof(USB_JoystickReport_Input_t));
 230:	88 e0       	ldi	r24, 0x08	; 8
 232:	e9 ec       	ldi	r30, 0xC9	; 201
 234:	f1 e0       	ldi	r31, 0x01	; 1
 236:	01 90       	ld	r0, Z+
 238:	0d 92       	st	X+, r0
 23a:	8a 95       	dec	r24
 23c:	e1 f7       	brne	.-8      	; 0x236 <GetNextReport+0x42>
		echoes--;
 23e:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <echoes>
 242:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <echoes+0x1>
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	20 c1       	rjmp	.+576    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
		return;
	}

	// States and moves management
	switch (state)
 24a:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <state>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	c1 f0       	breq	.+48     	; 0x282 <GetNextReport+0x8e>
 252:	68 f4       	brcc	.+26     	; 0x26e <GetNextReport+0x7a>
 254:	88 23       	and	r24, r24
 256:	99 f0       	breq	.+38     	; 0x27e <GetNextReport+0x8a>
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	09 f0       	breq	.+2      	; 0x25e <GetNextReport+0x6a>
 25c:	0c c1       	rjmp	.+536    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
		case SYNC_CONTROLLER:
			state = BREATHE;
			break;		
            
        case SYNC_POSITION:
			bufindex = 0;
 25e:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <bufindex+0x1>
 262:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <bufindex>


			ReportData->Button = 0;
 266:	11 96       	adiw	r26, 0x01	; 1
 268:	1c 92       	st	X, r1
 26a:	1e 92       	st	-X, r1
 26c:	08 c0       	rjmp	.+16     	; 0x27e <GetNextReport+0x8a>
		echoes--;
		return;
	}

	// States and moves management
	switch (state)
 26e:	84 30       	cpi	r24, 0x04	; 4
 270:	09 f4       	brne	.+2      	; 0x274 <GetNextReport+0x80>
 272:	fe c0       	rjmp	.+508    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 274:	40 f0       	brcs	.+16     	; 0x286 <GetNextReport+0x92>
 276:	85 30       	cpi	r24, 0x05	; 5
 278:	09 f4       	brne	.+2      	; 0x27c <GetNextReport+0x88>
 27a:	0b c1       	rjmp	.+534    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 27c:	fc c0       	rjmp	.+504    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			ReportData->RX = STICK_CENTER;
			ReportData->RY = STICK_CENTER;
			ReportData->HAT = HAT_CENTER;


			state = BREATHE;
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	f8 c0       	rjmp	.+496    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			break;

		case BREATHE:
			state = PROCESS;
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	f6 c0       	rjmp	.+492    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			break;

		case PROCESS:

			switch (step[bufindex].button)
 286:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <bufindex>
 28a:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <bufindex+0x1>
 28e:	fc 01       	movw	r30, r24
 290:	ee 0f       	add	r30, r30
 292:	ff 1f       	adc	r31, r31
 294:	8e 0f       	add	r24, r30
 296:	9f 1f       	adc	r25, r31
 298:	fc 01       	movw	r30, r24
 29a:	e0 50       	subi	r30, 0x00	; 0
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	80 81       	ld	r24, Z
 2a0:	89 30       	cpi	r24, 0x09	; 9
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <GetNextReport+0xb2>
 2a4:	75 c0       	rjmp	.+234    	; 0x390 <GetNextReport+0x19c>
 2a6:	20 f5       	brcc	.+72     	; 0x2f0 <GetNextReport+0xfc>
 2a8:	84 30       	cpi	r24, 0x04	; 4
 2aa:	09 f4       	brne	.+2      	; 0x2ae <GetNextReport+0xba>
 2ac:	5f c0       	rjmp	.+190    	; 0x36c <GetNextReport+0x178>
 2ae:	80 f4       	brcc	.+32     	; 0x2d0 <GetNextReport+0xdc>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <GetNextReport+0xc2>
 2b4:	52 c0       	rjmp	.+164    	; 0x35a <GetNextReport+0x166>
 2b6:	08 f4       	brcc	.+2      	; 0x2ba <GetNextReport+0xc6>
 2b8:	4c c0       	rjmp	.+152    	; 0x352 <GetNextReport+0x15e>
 2ba:	82 30       	cpi	r24, 0x02	; 2
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <GetNextReport+0xcc>
 2be:	52 c0       	rjmp	.+164    	; 0x364 <GetNextReport+0x170>
 2c0:	83 30       	cpi	r24, 0x03	; 3
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <GetNextReport+0xd2>
 2c4:	91 c0       	rjmp	.+290    	; 0x3e8 <GetNextReport+0x1f4>
				case L_LEFT:
					ReportData->LX = STICK_MIN;				
					break;

				case L_RIGHT:
					ReportData->LX = STICK_MAX;				
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	13 96       	adiw	r26, 0x03	; 3
 2ca:	8c 93       	st	X, r24
 2cc:	13 97       	sbiw	r26, 0x03	; 3
					break;
 2ce:	8c c0       	rjmp	.+280    	; 0x3e8 <GetNextReport+0x1f4>
			state = PROCESS;
			break;

		case PROCESS:

			switch (step[bufindex].button)
 2d0:	86 30       	cpi	r24, 0x06	; 6
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <GetNextReport+0xe2>
 2d4:	54 c0       	rjmp	.+168    	; 0x37e <GetNextReport+0x18a>
 2d6:	08 f4       	brcc	.+2      	; 0x2da <GetNextReport+0xe6>
 2d8:	4d c0       	rjmp	.+154    	; 0x374 <GetNextReport+0x180>
 2da:	87 30       	cpi	r24, 0x07	; 7
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <GetNextReport+0xec>
 2de:	53 c0       	rjmp	.+166    	; 0x386 <GetNextReport+0x192>
 2e0:	88 30       	cpi	r24, 0x08	; 8
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <GetNextReport+0xf2>
 2e4:	81 c0       	rjmp	.+258    	; 0x3e8 <GetNextReport+0x1f4>
				case R_RIGHT:
					ReportData->RX = STICK_MAX;				
					break;
					
				case A:
					ReportData->Button |= SWITCH_A;
 2e6:	8d 91       	ld	r24, X+
 2e8:	9c 91       	ld	r25, X
 2ea:	11 97       	sbiw	r26, 0x01	; 1
 2ec:	84 60       	ori	r24, 0x04	; 4
 2ee:	79 c0       	rjmp	.+242    	; 0x3e2 <GetNextReport+0x1ee>
			state = PROCESS;
			break;

		case PROCESS:

			switch (step[bufindex].button)
 2f0:	8e 30       	cpi	r24, 0x0E	; 14
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <GetNextReport+0x102>
 2f4:	61 c0       	rjmp	.+194    	; 0x3b8 <GetNextReport+0x1c4>
 2f6:	80 f4       	brcc	.+32     	; 0x318 <GetNextReport+0x124>
 2f8:	8b 30       	cpi	r24, 0x0B	; 11
 2fa:	09 f4       	brne	.+2      	; 0x2fe <GetNextReport+0x10a>
 2fc:	53 c0       	rjmp	.+166    	; 0x3a4 <GetNextReport+0x1b0>
 2fe:	08 f4       	brcc	.+2      	; 0x302 <GetNextReport+0x10e>
 300:	4c c0       	rjmp	.+152    	; 0x39a <GetNextReport+0x1a6>
 302:	8c 30       	cpi	r24, 0x0C	; 12
 304:	09 f4       	brne	.+2      	; 0x308 <GetNextReport+0x114>
 306:	53 c0       	rjmp	.+166    	; 0x3ae <GetNextReport+0x1ba>
 308:	8d 30       	cpi	r24, 0x0D	; 13
 30a:	09 f0       	breq	.+2      	; 0x30e <GetNextReport+0x11a>
 30c:	6d c0       	rjmp	.+218    	; 0x3e8 <GetNextReport+0x1f4>
				case L:
					ReportData->Button |= SWITCH_L;
					break;

				case R:
					ReportData->Button |= SWITCH_R;
 30e:	8d 91       	ld	r24, X+
 310:	9c 91       	ld	r25, X
 312:	11 97       	sbiw	r26, 0x01	; 1
 314:	80 62       	ori	r24, 0x20	; 32
 316:	65 c0       	rjmp	.+202    	; 0x3e2 <GetNextReport+0x1ee>
			state = PROCESS;
			break;

		case PROCESS:

			switch (step[bufindex].button)
 318:	81 31       	cpi	r24, 0x11	; 17
 31a:	09 f4       	brne	.+2      	; 0x31e <GetNextReport+0x12a>
 31c:	57 c0       	rjmp	.+174    	; 0x3cc <GetNextReport+0x1d8>
 31e:	70 f4       	brcc	.+28     	; 0x33c <GetNextReport+0x148>
 320:	8f 30       	cpi	r24, 0x0F	; 15
 322:	09 f4       	brne	.+2      	; 0x326 <GetNextReport+0x132>
 324:	4e c0       	rjmp	.+156    	; 0x3c2 <GetNextReport+0x1ce>
 326:	80 31       	cpi	r24, 0x10	; 16
 328:	09 f0       	breq	.+2      	; 0x32c <GetNextReport+0x138>
 32a:	5e c0       	rjmp	.+188    	; 0x3e8 <GetNextReport+0x1f4>
				case ZR:
					ReportData->Button |= SWITCH_ZR;
					break;

				case MINUS:
					ReportData->Button |= SWITCH_MINUS;
 32c:	8d 91       	ld	r24, X+
 32e:	9c 91       	ld	r25, X
 330:	11 97       	sbiw	r26, 0x01	; 1
 332:	91 60       	ori	r25, 0x01	; 1
 334:	11 96       	adiw	r26, 0x01	; 1
 336:	9c 93       	st	X, r25
 338:	8e 93       	st	-X, r24
 33a:	48 c0       	rjmp	.+144    	; 0x3cc <GetNextReport+0x1d8>
			state = PROCESS;
			break;

		case PROCESS:

			switch (step[bufindex].button)
 33c:	82 31       	cpi	r24, 0x12	; 18
 33e:	09 f4       	brne	.+2      	; 0x342 <GetNextReport+0x14e>
 340:	4c c0       	rjmp	.+152    	; 0x3da <GetNextReport+0x1e6>
 342:	83 31       	cpi	r24, 0x13	; 19
 344:	09 f0       	breq	.+2      	; 0x348 <GetNextReport+0x154>
 346:	50 c0       	rjmp	.+160    	; 0x3e8 <GetNextReport+0x1f4>
				case SUSPEND:
					ReportData->Button |= SWITCH_ZL | SWITCH_ZR;
					break;

				case SYNC:
					ReportData->Button |= SWITCH_L | SWITCH_R;
 348:	8d 91       	ld	r24, X+
 34a:	9c 91       	ld	r25, X
 34c:	11 97       	sbiw	r26, 0x01	; 1
 34e:	80 63       	ori	r24, 0x30	; 48
 350:	48 c0       	rjmp	.+144    	; 0x3e2 <GetNextReport+0x1ee>

			switch (step[bufindex].button)
			{

				case L_UP:
					ReportData->LY = STICK_MIN;				
 352:	14 96       	adiw	r26, 0x04	; 4
 354:	1c 92       	st	X, r1
 356:	14 97       	sbiw	r26, 0x04	; 4
					break;
 358:	47 c0       	rjmp	.+142    	; 0x3e8 <GetNextReport+0x1f4>

				case L_DOWN:
					ReportData->LY = STICK_MAX;				
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	14 96       	adiw	r26, 0x04	; 4
 35e:	8c 93       	st	X, r24
 360:	14 97       	sbiw	r26, 0x04	; 4
					break;
 362:	42 c0       	rjmp	.+132    	; 0x3e8 <GetNextReport+0x1f4>

				case L_LEFT:
					ReportData->LX = STICK_MIN;				
 364:	13 96       	adiw	r26, 0x03	; 3
 366:	1c 92       	st	X, r1
 368:	13 97       	sbiw	r26, 0x03	; 3
					break;
 36a:	3e c0       	rjmp	.+124    	; 0x3e8 <GetNextReport+0x1f4>
				case L_RIGHT:
					ReportData->LX = STICK_MAX;				
					break;

				case R_UP:
					ReportData->RY = STICK_MIN;				
 36c:	16 96       	adiw	r26, 0x06	; 6
 36e:	1c 92       	st	X, r1
 370:	16 97       	sbiw	r26, 0x06	; 6
					break;
 372:	3a c0       	rjmp	.+116    	; 0x3e8 <GetNextReport+0x1f4>

				case R_DOWN:
					ReportData->RY = STICK_MAX;				
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	16 96       	adiw	r26, 0x06	; 6
 378:	8c 93       	st	X, r24
 37a:	16 97       	sbiw	r26, 0x06	; 6
					break;
 37c:	35 c0       	rjmp	.+106    	; 0x3e8 <GetNextReport+0x1f4>

				case R_LEFT:
					ReportData->RX = STICK_MIN;				
 37e:	15 96       	adiw	r26, 0x05	; 5
 380:	1c 92       	st	X, r1
 382:	15 97       	sbiw	r26, 0x05	; 5
					break;
 384:	31 c0       	rjmp	.+98     	; 0x3e8 <GetNextReport+0x1f4>

				case R_RIGHT:
					ReportData->RX = STICK_MAX;				
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	15 96       	adiw	r26, 0x05	; 5
 38a:	8c 93       	st	X, r24
 38c:	15 97       	sbiw	r26, 0x05	; 5
					break;
 38e:	2c c0       	rjmp	.+88     	; 0x3e8 <GetNextReport+0x1f4>
				case A:
					ReportData->Button |= SWITCH_A;
					break;

				case B:
					ReportData->Button |= SWITCH_B;
 390:	8d 91       	ld	r24, X+
 392:	9c 91       	ld	r25, X
 394:	11 97       	sbiw	r26, 0x01	; 1
 396:	82 60       	ori	r24, 0x02	; 2
 398:	24 c0       	rjmp	.+72     	; 0x3e2 <GetNextReport+0x1ee>
					break;

				case Y:
					ReportData->Button |= SWITCH_Y;
 39a:	8d 91       	ld	r24, X+
 39c:	9c 91       	ld	r25, X
 39e:	11 97       	sbiw	r26, 0x01	; 1
 3a0:	81 60       	ori	r24, 0x01	; 1
 3a2:	1f c0       	rjmp	.+62     	; 0x3e2 <GetNextReport+0x1ee>
					break;

				case X:
					ReportData->Button |= SWITCH_X;
 3a4:	8d 91       	ld	r24, X+
 3a6:	9c 91       	ld	r25, X
 3a8:	11 97       	sbiw	r26, 0x01	; 1
 3aa:	88 60       	ori	r24, 0x08	; 8
 3ac:	1a c0       	rjmp	.+52     	; 0x3e2 <GetNextReport+0x1ee>
					break;

				case L:
					ReportData->Button |= SWITCH_L;
 3ae:	8d 91       	ld	r24, X+
 3b0:	9c 91       	ld	r25, X
 3b2:	11 97       	sbiw	r26, 0x01	; 1
 3b4:	80 61       	ori	r24, 0x10	; 16
 3b6:	15 c0       	rjmp	.+42     	; 0x3e2 <GetNextReport+0x1ee>
				case R:
					ReportData->Button |= SWITCH_R;
					break;
				
				case ZL:
					ReportData->Button |= SWITCH_ZL;
 3b8:	8d 91       	ld	r24, X+
 3ba:	9c 91       	ld	r25, X
 3bc:	11 97       	sbiw	r26, 0x01	; 1
 3be:	80 64       	ori	r24, 0x40	; 64
 3c0:	10 c0       	rjmp	.+32     	; 0x3e2 <GetNextReport+0x1ee>
					break;

				case ZR:
					ReportData->Button |= SWITCH_ZR;
 3c2:	8d 91       	ld	r24, X+
 3c4:	9c 91       	ld	r25, X
 3c6:	11 97       	sbiw	r26, 0x01	; 1
 3c8:	80 68       	ori	r24, 0x80	; 128
 3ca:	0b c0       	rjmp	.+22     	; 0x3e2 <GetNextReport+0x1ee>

				case MINUS:
					ReportData->Button |= SWITCH_MINUS;

                case PLUS:
                    ReportData->Button |= SWITCH_PLUS;
 3cc:	8d 91       	ld	r24, X+
 3ce:	9c 91       	ld	r25, X
 3d0:	11 97       	sbiw	r26, 0x01	; 1
 3d2:	92 60       	ori	r25, 0x02	; 2
 3d4:	11 96       	adiw	r26, 0x01	; 1
 3d6:	9c 93       	st	X, r25
 3d8:	8e 93       	st	-X, r24

				case SUSPEND:
					ReportData->Button |= SWITCH_ZL | SWITCH_ZR;
 3da:	8d 91       	ld	r24, X+
 3dc:	9c 91       	ld	r25, X
 3de:	11 97       	sbiw	r26, 0x01	; 1
 3e0:	80 6c       	ori	r24, 0xC0	; 192
					break;

				case SYNC:
					ReportData->Button |= SWITCH_L | SWITCH_R;
 3e2:	11 96       	adiw	r26, 0x01	; 1
 3e4:	9c 93       	st	X, r25
 3e6:	8e 93       	st	-X, r24
					ReportData->RY = STICK_CENTER;
					ReportData->HAT = HAT_CENTER;
					break;
			}

			duration_count++;
 3e8:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <duration_count>
 3ec:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <duration_count+0x1>
 3f0:	2f 5f       	subi	r18, 0xFF	; 255
 3f2:	3f 4f       	sbci	r19, 0xFF	; 255
 3f4:	30 93 bd 01 	sts	0x01BD, r19	; 0x8001bd <duration_count+0x1>
 3f8:	20 93 bc 01 	sts	0x01BC, r18	; 0x8001bc <duration_count>

			if (duration_count > step[bufindex].duration)
 3fc:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <bufindex>
 400:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <bufindex+0x1>
 404:	fc 01       	movw	r30, r24
 406:	ee 0f       	add	r30, r30
 408:	ff 1f       	adc	r31, r31
 40a:	e8 0f       	add	r30, r24
 40c:	f9 1f       	adc	r31, r25
 40e:	e0 50       	subi	r30, 0x00	; 0
 410:	ff 4f       	sbci	r31, 0xFF	; 255
 412:	41 81       	ldd	r20, Z+1	; 0x01
 414:	52 81       	ldd	r21, Z+2	; 0x02
 416:	42 17       	cp	r20, r18
 418:	53 07       	cpc	r21, r19
 41a:	48 f4       	brcc	.+18     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			{
				bufindex++;
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <bufindex+0x1>
 422:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <bufindex>
				duration_count = 0;				
 426:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <duration_count+0x1>
 42a:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <duration_count>
			}


			if (bufindex > (int)( sizeof(step) / sizeof(step[0])) - 1)
 42e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <bufindex>
 432:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <bufindex+0x1>
 436:	ce 97       	sbiw	r24, 0x3e	; 62
 438:	f4 f0       	brlt	.+60     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			{

				// state = CLEANUP;

				bufindex = 7;
 43a:	87 e0       	ldi	r24, 0x07	; 7
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <bufindex+0x1>
 442:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <bufindex>
				duration_count = 0;
 446:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <duration_count+0x1>
 44a:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <duration_count>

				state = BREATHE;
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <state>

				ReportData->LX = STICK_CENTER;
 454:	80 e8       	ldi	r24, 0x80	; 128
 456:	13 96       	adiw	r26, 0x03	; 3
 458:	8c 93       	st	X, r24
 45a:	13 97       	sbiw	r26, 0x03	; 3
				ReportData->LY = STICK_CENTER;
 45c:	14 96       	adiw	r26, 0x04	; 4
 45e:	8c 93       	st	X, r24
 460:	14 97       	sbiw	r26, 0x04	; 4
				ReportData->RX = STICK_CENTER;
 462:	15 96       	adiw	r26, 0x05	; 5
 464:	8c 93       	st	X, r24
 466:	15 97       	sbiw	r26, 0x05	; 5
				ReportData->RY = STICK_CENTER;
 468:	16 96       	adiw	r26, 0x06	; 6
 46a:	8c 93       	st	X, r24
 46c:	16 97       	sbiw	r26, 0x06	; 6
 46e:	03 c0       	rjmp	.+6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			}

			break;

		case CLEANUP:
			state = DONE;
 470:	85 e0       	ldi	r24, 0x05	; 5
 472:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <state>
	// if (state != SYNC_CONTROLLER && state != SYNC_POSITION)
	// 	if (pgm_read_byte(&(image_data[(xpos / 8) + (ypos * 40)])) & 1 << (xpos % 8))
	// 		ReportData->Button |= SWITCH_A;

	// Prepare to echo this report
	memcpy(&last_report, ReportData, sizeof(USB_JoystickReport_Input_t));
 476:	88 e0       	ldi	r24, 0x08	; 8
 478:	fd 01       	movw	r30, r26
 47a:	a9 ec       	ldi	r26, 0xC9	; 201
 47c:	b1 e0       	ldi	r27, 0x01	; 1
 47e:	01 90       	ld	r0, Z+
 480:	0d 92       	st	X+, r0
 482:	8a 95       	dec	r24
 484:	e1 f7       	brne	.-8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	echoes = ECHOES;
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <echoes+0x1>
 48e:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <echoes>
 492:	08 95       	ret

00000494 <HID_Task>:

	// Not used here, it looks like we don't receive control request from the Switch.
}

// Process and deliver data from IN and OUT endpoints.
void HID_Task(void) {
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	cd b7       	in	r28, 0x3d	; 61
 49a:	de b7       	in	r29, 0x3e	; 62
 49c:	28 97       	sbiw	r28, 0x08	; 8
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	f8 94       	cli
 4a2:	de bf       	out	0x3e, r29	; 62
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	cd bf       	out	0x3d, r28	; 61
	// If the device isn't connected and properly configured, we can't do anything here.
	if (USB_DeviceState != DEVICE_STATE_Configured)
 4a8:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <USB_DeviceState>
 4ac:	84 30       	cpi	r24, 0x04	; 4
 4ae:	89 f5       	brne	.+98     	; 0x512 <HID_Task+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		return;

	// We'll start with the OUT endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_OUT_EPADDR);
	// We'll check to see if we received something on the OUT endpoint.
	if (Endpoint_IsOUTReceived())
 4ba:	82 ff       	sbrs	r24, 2
 4bc:	12 c0       	rjmp	.+36     	; 0x4e2 <HID_Task+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 4be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		// If we did, and the packet has data, we'll react to it.
		if (Endpoint_IsReadWriteAllowed())
 4c2:	85 ff       	sbrs	r24, 5
 4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <HID_Task+0x44>
		{
			// We'll create a place to store our data received from the host.
			USB_JoystickReport_Output_t JoystickOutputData;
			// We'll then take in that data, setting it up in our storage.
			while(Endpoint_Read_Stream_LE(&JoystickOutputData, sizeof(JoystickOutputData), NULL) != ENDPOINT_RWSTREAM_NoError);
 4c6:	40 e0       	ldi	r20, 0x00	; 0
 4c8:	50 e0       	ldi	r21, 0x00	; 0
 4ca:	67 e0       	ldi	r22, 0x07	; 7
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	ce 01       	movw	r24, r28
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	b8 d0       	rcall	.+368    	; 0x644 <Endpoint_Read_Stream_LE>
 4d4:	81 11       	cpse	r24, r1
 4d6:	f7 cf       	rjmp	.-18     	; 0x4c6 <HID_Task+0x32>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 4d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4dc:	8b 77       	andi	r24, 0x7B	; 123
 4de:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	// We'll then move on to the IN endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_IN_EPADDR);
	// We first check to see if the host is ready to accept data.
	if (Endpoint_IsINReady())
 4ec:	80 ff       	sbrs	r24, 0
 4ee:	11 c0       	rjmp	.+34     	; 0x512 <HID_Task+0x7e>
	{
		// We'll create an empty report.
		USB_JoystickReport_Input_t JoystickInputData;
		// We'll then populate this report with what we want to send to the host.
		GetNextReport(&JoystickInputData);
 4f0:	ce 01       	movw	r24, r28
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	7f de       	rcall	.-770    	; 0x1f4 <GetNextReport>
		// Once populated, we can output this data to the host. We do this by first writing the data to the control stream.
		while(Endpoint_Write_Stream_LE(&JoystickInputData, sizeof(JoystickInputData), NULL) != ENDPOINT_RWSTREAM_NoError);
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	68 e0       	ldi	r22, 0x08	; 8
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	ce 01       	movw	r24, r28
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	56 d0       	rcall	.+172    	; 0x5b0 <Endpoint_Write_Stream_LE>
 504:	81 11       	cpse	r24, r1
 506:	f7 cf       	rjmp	.-18     	; 0x4f6 <HID_Task+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 508:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 50c:	8e 77       	andi	r24, 0x7E	; 126
 50e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		// We then send an IN packet on this endpoint.
		Endpoint_ClearIN();
	}
}
 512:	28 96       	adiw	r28, 0x08	; 8
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	f8 94       	cli
 518:	de bf       	out	0x3e, r29	; 62
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	cd bf       	out	0x3d, r28	; 61
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	08 95       	ret

00000524 <main>:

	
};

// Main entry point.
int main(void) {
 524:	44 de       	rcall	.-888    	; 0x1ae <SetupHardware>
 526:	78 94       	sei
 528:	b5 df       	rcall	.-150    	; 0x494 <HID_Task>
 52a:	a6 d4       	rcall	.+2380   	; 0xe78 <USB_USBTask>
 52c:	fd cf       	rjmp	.-6      	; 0x528 <main+0x4>

0000052e <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 52e:	29 2f       	mov	r18, r25
 530:	33 27       	eor	r19, r19
 532:	23 30       	cpi	r18, 0x03	; 3
 534:	31 05       	cpc	r19, r1
 536:	e1 f0       	breq	.+56     	; 0x570 <CALLBACK_USB_GetDescriptor+0x42>
 538:	58 f4       	brcc	.+22     	; 0x550 <CALLBACK_USB_GetDescriptor+0x22>
 53a:	21 30       	cpi	r18, 0x01	; 1
 53c:	31 05       	cpc	r19, r1
 53e:	99 f0       	breq	.+38     	; 0x566 <CALLBACK_USB_GetDescriptor+0x38>
 540:	22 30       	cpi	r18, 0x02	; 2
 542:	31 05       	cpc	r19, r1
 544:	69 f5       	brne	.+90     	; 0x5a0 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 546:	89 e2       	ldi	r24, 0x29	; 41
 548:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 54a:	20 ee       	ldi	r18, 0xE0	; 224
 54c:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 54e:	2c c0       	rjmp	.+88     	; 0x5a8 <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 550:	21 32       	cpi	r18, 0x21	; 33
 552:	31 05       	cpc	r19, r1
 554:	01 f1       	breq	.+64     	; 0x596 <CALLBACK_USB_GetDescriptor+0x68>
 556:	22 32       	cpi	r18, 0x22	; 34
 558:	31 05       	cpc	r19, r1
 55a:	11 f5       	brne	.+68     	; 0x5a0 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
 55c:	86 e5       	ldi	r24, 0x56	; 86
 55e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
 560:	2b e1       	ldi	r18, 0x1B	; 27
 562:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(JoystickReport);
			break;
 564:	21 c0       	rjmp	.+66     	; 0x5a8 <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 566:	82 e1       	ldi	r24, 0x12	; 18
 568:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 56a:	29 e0       	ldi	r18, 0x09	; 9
 56c:	31 e0       	ldi	r19, 0x01	; 1
 56e:	1c c0       	rjmp	.+56     	; 0x5a8 <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 570:	99 27       	eor	r25, r25
 572:	81 30       	cpi	r24, 0x01	; 1
 574:	91 05       	cpc	r25, r1
 576:	49 f0       	breq	.+18     	; 0x58a <CALLBACK_USB_GetDescriptor+0x5c>
 578:	28 f0       	brcs	.+10     	; 0x584 <CALLBACK_USB_GetDescriptor+0x56>
 57a:	02 97       	sbiw	r24, 0x02	; 2
 57c:	89 f4       	brne	.+34     	; 0x5a0 <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 57e:	e8 e9       	ldi	r30, 0x98	; 152
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	05 c0       	rjmp	.+10     	; 0x58e <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 584:	ec ed       	ldi	r30, 0xDC	; 220
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	02 c0       	rjmp	.+4      	; 0x58e <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 58a:	ee eb       	ldi	r30, 0xBE	; 190
 58c:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 58e:	84 91       	lpm	r24, Z
 590:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 592:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 594:	09 c0       	rjmp	.+18     	; 0x5a8 <CALLBACK_USB_GetDescriptor+0x7a>
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 596:	89 e0       	ldi	r24, 0x09	; 9
 598:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
 59a:	22 ef       	ldi	r18, 0xF2	; 242
 59c:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 59e:	04 c0       	rjmp	.+8      	; 0x5a8 <CALLBACK_USB_GetDescriptor+0x7a>
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	90 e0       	ldi	r25, 0x00	; 0
	const void** const DescriptorAddress
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 5a4:	20 e0       	ldi	r18, 0x00	; 0
 5a6:	30 e0       	ldi	r19, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
 5a8:	fa 01       	movw	r30, r20
 5aa:	31 83       	std	Z+1, r19	; 0x01
 5ac:	20 83       	st	Z, r18
	return Size;
}
 5ae:	08 95       	ret

000005b0 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 5b0:	cf 92       	push	r12
 5b2:	df 92       	push	r13
 5b4:	ef 92       	push	r14
 5b6:	ff 92       	push	r15
 5b8:	0f 93       	push	r16
 5ba:	1f 93       	push	r17
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	ec 01       	movw	r28, r24
 5c2:	8b 01       	movw	r16, r22
 5c4:	7a 01       	movw	r14, r20
 5c6:	99 d1       	rcall	.+818    	; 0x8fa <Endpoint_WaitUntilReady>
 5c8:	81 11       	cpse	r24, r1
 5ca:	33 c0       	rjmp	.+102    	; 0x632 <Endpoint_Write_Stream_LE+0x82>
 5cc:	e1 14       	cp	r14, r1
 5ce:	f1 04       	cpc	r15, r1
 5d0:	39 f0       	breq	.+14     	; 0x5e0 <Endpoint_Write_Stream_LE+0x30>
 5d2:	f7 01       	movw	r30, r14
 5d4:	80 81       	ld	r24, Z
 5d6:	91 81       	ldd	r25, Z+1	; 0x01
 5d8:	08 1b       	sub	r16, r24
 5da:	19 0b       	sbc	r17, r25
 5dc:	c8 0f       	add	r28, r24
 5de:	d9 1f       	adc	r29, r25
 5e0:	c1 2c       	mov	r12, r1
 5e2:	d1 2c       	mov	r13, r1
 5e4:	01 15       	cp	r16, r1
 5e6:	11 05       	cpc	r17, r1
 5e8:	19 f1       	breq	.+70     	; 0x630 <Endpoint_Write_Stream_LE+0x80>
 5ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5ee:	85 fd       	sbrc	r24, 5
 5f0:	16 c0       	rjmp	.+44     	; 0x61e <Endpoint_Write_Stream_LE+0x6e>
 5f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5f6:	8e 77       	andi	r24, 0x7E	; 126
 5f8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5fc:	3d d4       	rcall	.+2170   	; 0xe78 <USB_USBTask>
 5fe:	e1 14       	cp	r14, r1
 600:	f1 04       	cpc	r15, r1
 602:	49 f0       	breq	.+18     	; 0x616 <Endpoint_Write_Stream_LE+0x66>
 604:	f7 01       	movw	r30, r14
 606:	80 81       	ld	r24, Z
 608:	91 81       	ldd	r25, Z+1	; 0x01
 60a:	c8 0e       	add	r12, r24
 60c:	d9 1e       	adc	r13, r25
 60e:	d1 82       	std	Z+1, r13	; 0x01
 610:	c0 82       	st	Z, r12
 612:	85 e0       	ldi	r24, 0x05	; 5
 614:	0e c0       	rjmp	.+28     	; 0x632 <Endpoint_Write_Stream_LE+0x82>
 616:	71 d1       	rcall	.+738    	; 0x8fa <Endpoint_WaitUntilReady>
 618:	88 23       	and	r24, r24
 61a:	21 f3       	breq	.-56     	; 0x5e4 <Endpoint_Write_Stream_LE+0x34>
 61c:	0a c0       	rjmp	.+20     	; 0x632 <Endpoint_Write_Stream_LE+0x82>
 61e:	89 91       	ld	r24, Y+
 620:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 624:	01 50       	subi	r16, 0x01	; 1
 626:	11 09       	sbc	r17, r1
 628:	ff ef       	ldi	r31, 0xFF	; 255
 62a:	cf 1a       	sub	r12, r31
 62c:	df 0a       	sbc	r13, r31
 62e:	da cf       	rjmp	.-76     	; 0x5e4 <Endpoint_Write_Stream_LE+0x34>
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	1f 91       	pop	r17
 638:	0f 91       	pop	r16
 63a:	ff 90       	pop	r15
 63c:	ef 90       	pop	r14
 63e:	df 90       	pop	r13
 640:	cf 90       	pop	r12
 642:	08 95       	ret

00000644 <Endpoint_Read_Stream_LE>:
 644:	cf 92       	push	r12
 646:	df 92       	push	r13
 648:	ef 92       	push	r14
 64a:	ff 92       	push	r15
 64c:	0f 93       	push	r16
 64e:	1f 93       	push	r17
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	ec 01       	movw	r28, r24
 656:	8b 01       	movw	r16, r22
 658:	7a 01       	movw	r14, r20
 65a:	4f d1       	rcall	.+670    	; 0x8fa <Endpoint_WaitUntilReady>
 65c:	81 11       	cpse	r24, r1
 65e:	33 c0       	rjmp	.+102    	; 0x6c6 <Endpoint_Read_Stream_LE+0x82>
 660:	e1 14       	cp	r14, r1
 662:	f1 04       	cpc	r15, r1
 664:	39 f0       	breq	.+14     	; 0x674 <Endpoint_Read_Stream_LE+0x30>
 666:	f7 01       	movw	r30, r14
 668:	80 81       	ld	r24, Z
 66a:	91 81       	ldd	r25, Z+1	; 0x01
 66c:	08 1b       	sub	r16, r24
 66e:	19 0b       	sbc	r17, r25
 670:	c8 0f       	add	r28, r24
 672:	d9 1f       	adc	r29, r25
 674:	c1 2c       	mov	r12, r1
 676:	d1 2c       	mov	r13, r1
 678:	01 15       	cp	r16, r1
 67a:	11 05       	cpc	r17, r1
 67c:	19 f1       	breq	.+70     	; 0x6c4 <Endpoint_Read_Stream_LE+0x80>
 67e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 682:	85 fd       	sbrc	r24, 5
 684:	16 c0       	rjmp	.+44     	; 0x6b2 <Endpoint_Read_Stream_LE+0x6e>
 686:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 68a:	8b 77       	andi	r24, 0x7B	; 123
 68c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 690:	f3 d3       	rcall	.+2022   	; 0xe78 <USB_USBTask>
 692:	e1 14       	cp	r14, r1
 694:	f1 04       	cpc	r15, r1
 696:	49 f0       	breq	.+18     	; 0x6aa <Endpoint_Read_Stream_LE+0x66>
 698:	f7 01       	movw	r30, r14
 69a:	80 81       	ld	r24, Z
 69c:	91 81       	ldd	r25, Z+1	; 0x01
 69e:	c8 0e       	add	r12, r24
 6a0:	d9 1e       	adc	r13, r25
 6a2:	d1 82       	std	Z+1, r13	; 0x01
 6a4:	c0 82       	st	Z, r12
 6a6:	85 e0       	ldi	r24, 0x05	; 5
 6a8:	0e c0       	rjmp	.+28     	; 0x6c6 <Endpoint_Read_Stream_LE+0x82>
 6aa:	27 d1       	rcall	.+590    	; 0x8fa <Endpoint_WaitUntilReady>
 6ac:	88 23       	and	r24, r24
 6ae:	21 f3       	breq	.-56     	; 0x678 <Endpoint_Read_Stream_LE+0x34>
 6b0:	0a c0       	rjmp	.+20     	; 0x6c6 <Endpoint_Read_Stream_LE+0x82>
 6b2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 6b6:	89 93       	st	Y+, r24
 6b8:	01 50       	subi	r16, 0x01	; 1
 6ba:	11 09       	sbc	r17, r1
 6bc:	ff ef       	ldi	r31, 0xFF	; 255
 6be:	cf 1a       	sub	r12, r31
 6c0:	df 0a       	sbc	r13, r31
 6c2:	da cf       	rjmp	.-76     	; 0x678 <Endpoint_Read_Stream_LE+0x34>
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	1f 91       	pop	r17
 6cc:	0f 91       	pop	r16
 6ce:	ff 90       	pop	r15
 6d0:	ef 90       	pop	r14
 6d2:	df 90       	pop	r13
 6d4:	cf 90       	pop	r12
 6d6:	08 95       	ret

000006d8 <Endpoint_Write_Control_Stream_LE>:
 6d8:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <USB_ControlRequest+0x6>
 6dc:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <USB_ControlRequest+0x7>
 6e0:	26 17       	cp	r18, r22
 6e2:	37 07       	cpc	r19, r23
 6e4:	48 f0       	brcs	.+18     	; 0x6f8 <Endpoint_Write_Control_Stream_LE+0x20>
 6e6:	61 15       	cp	r22, r1
 6e8:	71 05       	cpc	r23, r1
 6ea:	39 f4       	brne	.+14     	; 0x6fa <Endpoint_Write_Control_Stream_LE+0x22>
 6ec:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6f0:	2e 77       	andi	r18, 0x7E	; 126
 6f2:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6f6:	01 c0       	rjmp	.+2      	; 0x6fa <Endpoint_Write_Control_Stream_LE+0x22>
 6f8:	b9 01       	movw	r22, r18
 6fa:	fc 01       	movw	r30, r24
 6fc:	20 e0       	ldi	r18, 0x00	; 0
 6fe:	61 15       	cp	r22, r1
 700:	71 05       	cpc	r23, r1
 702:	71 f1       	breq	.+92     	; 0x760 <Endpoint_Write_Control_Stream_LE+0x88>
 704:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <USB_DeviceState>
 708:	88 23       	and	r24, r24
 70a:	e9 f1       	breq	.+122    	; 0x786 <Endpoint_Write_Control_Stream_LE+0xae>
 70c:	85 30       	cpi	r24, 0x05	; 5
 70e:	e9 f1       	breq	.+122    	; 0x78a <Endpoint_Write_Control_Stream_LE+0xb2>
 710:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 714:	83 fd       	sbrc	r24, 3
 716:	3b c0       	rjmp	.+118    	; 0x78e <Endpoint_Write_Control_Stream_LE+0xb6>
 718:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 71c:	82 fd       	sbrc	r24, 2
 71e:	2d c0       	rjmp	.+90     	; 0x77a <Endpoint_Write_Control_Stream_LE+0xa2>
 720:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 724:	80 ff       	sbrs	r24, 0
 726:	eb cf       	rjmp	.-42     	; 0x6fe <Endpoint_Write_Control_Stream_LE+0x26>
 728:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 72c:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 730:	61 15       	cp	r22, r1
 732:	71 05       	cpc	r23, r1
 734:	51 f0       	breq	.+20     	; 0x74a <Endpoint_Write_Control_Stream_LE+0x72>
 736:	80 34       	cpi	r24, 0x40	; 64
 738:	91 05       	cpc	r25, r1
 73a:	38 f4       	brcc	.+14     	; 0x74a <Endpoint_Write_Control_Stream_LE+0x72>
 73c:	21 91       	ld	r18, Z+
 73e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 742:	61 50       	subi	r22, 0x01	; 1
 744:	71 09       	sbc	r23, r1
 746:	01 96       	adiw	r24, 0x01	; 1
 748:	f3 cf       	rjmp	.-26     	; 0x730 <Endpoint_Write_Control_Stream_LE+0x58>
 74a:	21 e0       	ldi	r18, 0x01	; 1
 74c:	80 34       	cpi	r24, 0x40	; 64
 74e:	91 05       	cpc	r25, r1
 750:	09 f0       	breq	.+2      	; 0x754 <Endpoint_Write_Control_Stream_LE+0x7c>
 752:	20 e0       	ldi	r18, 0x00	; 0
 754:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 758:	8e 77       	andi	r24, 0x7E	; 126
 75a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 75e:	cf cf       	rjmp	.-98     	; 0x6fe <Endpoint_Write_Control_Stream_LE+0x26>
 760:	21 11       	cpse	r18, r1
 762:	d0 cf       	rjmp	.-96     	; 0x704 <Endpoint_Write_Control_Stream_LE+0x2c>
 764:	0a c0       	rjmp	.+20     	; 0x77a <Endpoint_Write_Control_Stream_LE+0xa2>
 766:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <USB_DeviceState>
 76a:	88 23       	and	r24, r24
 76c:	61 f0       	breq	.+24     	; 0x786 <Endpoint_Write_Control_Stream_LE+0xae>
 76e:	85 30       	cpi	r24, 0x05	; 5
 770:	61 f0       	breq	.+24     	; 0x78a <Endpoint_Write_Control_Stream_LE+0xb2>
 772:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 776:	83 fd       	sbrc	r24, 3
 778:	0a c0       	rjmp	.+20     	; 0x78e <Endpoint_Write_Control_Stream_LE+0xb6>
 77a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 77e:	82 ff       	sbrs	r24, 2
 780:	f2 cf       	rjmp	.-28     	; 0x766 <Endpoint_Write_Control_Stream_LE+0x8e>
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	08 95       	ret
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	08 95       	ret
 78a:	83 e0       	ldi	r24, 0x03	; 3
 78c:	08 95       	ret
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	08 95       	ret

00000792 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 792:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <USB_ControlRequest+0x6>
 796:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <USB_ControlRequest+0x7>
 79a:	26 17       	cp	r18, r22
 79c:	37 07       	cpc	r19, r23
 79e:	48 f0       	brcs	.+18     	; 0x7b2 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 7a0:	61 15       	cp	r22, r1
 7a2:	71 05       	cpc	r23, r1
 7a4:	39 f4       	brne	.+14     	; 0x7b4 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7a6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7aa:	2e 77       	andi	r18, 0x7E	; 126
 7ac:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <Endpoint_Write_Control_PStream_LE+0x22>
 7b2:	b9 01       	movw	r22, r18
 7b4:	fc 01       	movw	r30, r24
 7b6:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 7b8:	61 15       	cp	r22, r1
 7ba:	71 05       	cpc	r23, r1
 7bc:	89 f1       	breq	.+98     	; 0x820 <Endpoint_Write_Control_PStream_LE+0x8e>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7be:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7c2:	88 23       	and	r24, r24
 7c4:	09 f4       	brne	.+2      	; 0x7c8 <Endpoint_Write_Control_PStream_LE+0x36>
 7c6:	3f c0       	rjmp	.+126    	; 0x846 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7c8:	85 30       	cpi	r24, 0x05	; 5
 7ca:	09 f4       	brne	.+2      	; 0x7ce <Endpoint_Write_Control_PStream_LE+0x3c>
 7cc:	3e c0       	rjmp	.+124    	; 0x84a <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 7ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 7d2:	83 fd       	sbrc	r24, 3
 7d4:	3c c0       	rjmp	.+120    	; 0x84e <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 7da:	82 fd       	sbrc	r24, 2
 7dc:	2e c0       	rjmp	.+92     	; 0x83a <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 7e2:	80 ff       	sbrs	r24, 0
 7e4:	e9 cf       	rjmp	.-46     	; 0x7b8 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 7e6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 7ea:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 7ee:	61 15       	cp	r22, r1
 7f0:	71 05       	cpc	r23, r1
 7f2:	59 f0       	breq	.+22     	; 0x80a <Endpoint_Write_Control_PStream_LE+0x78>
 7f4:	80 34       	cpi	r24, 0x40	; 64
 7f6:	91 05       	cpc	r25, r1
 7f8:	40 f4       	brcc	.+16     	; 0x80a <Endpoint_Write_Control_PStream_LE+0x78>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 7fa:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 7fc:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 800:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 802:	61 50       	subi	r22, 0x01	; 1
 804:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 806:	01 96       	adiw	r24, 0x01	; 1
 808:	f2 cf       	rjmp	.-28     	; 0x7ee <Endpoint_Write_Control_PStream_LE+0x5c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 80a:	21 e0       	ldi	r18, 0x01	; 1
 80c:	80 34       	cpi	r24, 0x40	; 64
 80e:	91 05       	cpc	r25, r1
 810:	09 f0       	breq	.+2      	; 0x814 <Endpoint_Write_Control_PStream_LE+0x82>
 812:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 814:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 818:	8e 77       	andi	r24, 0x7E	; 126
 81a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 81e:	cc cf       	rjmp	.-104    	; 0x7b8 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 820:	21 11       	cpse	r18, r1
 822:	cd cf       	rjmp	.-102    	; 0x7be <Endpoint_Write_Control_PStream_LE+0x2c>
 824:	0a c0       	rjmp	.+20     	; 0x83a <Endpoint_Write_Control_PStream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 826:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 82a:	88 23       	and	r24, r24
 82c:	61 f0       	breq	.+24     	; 0x846 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 82e:	85 30       	cpi	r24, 0x05	; 5
 830:	61 f0       	breq	.+24     	; 0x84a <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 832:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 836:	83 fd       	sbrc	r24, 3
 838:	0a c0       	rjmp	.+20     	; 0x84e <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 83a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 83e:	82 ff       	sbrs	r24, 2
 840:	f2 cf       	rjmp	.-28     	; 0x826 <Endpoint_Write_Control_PStream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 846:	82 e0       	ldi	r24, 0x02	; 2
 848:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 84a:	83 e0       	ldi	r24, 0x03	; 3
 84c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 84e:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 850:	08 95       	ret

00000852 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 852:	98 2f       	mov	r25, r24
 854:	97 30       	cpi	r25, 0x07	; 7
 856:	68 f5       	brcc	.+90     	; 0x8b2 <Endpoint_ConfigureEndpoint_Prv+0x60>
 858:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 85c:	98 17       	cp	r25, r24
 85e:	39 f0       	breq	.+14     	; 0x86e <Endpoint_ConfigureEndpoint_Prv+0x1c>
 860:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 864:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 868:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 86c:	03 c0       	rjmp	.+6      	; 0x874 <Endpoint_ConfigureEndpoint_Prv+0x22>
 86e:	24 2f       	mov	r18, r20
 870:	76 2f       	mov	r23, r22
 872:	50 e0       	ldi	r21, 0x00	; 0
 874:	21 fd       	sbrc	r18, 1
 876:	02 c0       	rjmp	.+4      	; 0x87c <Endpoint_ConfigureEndpoint_Prv+0x2a>
 878:	9f 5f       	subi	r25, 0xFF	; 255
 87a:	ec cf       	rjmp	.-40     	; 0x854 <Endpoint_ConfigureEndpoint_Prv+0x2>
 87c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 880:	3e 7f       	andi	r19, 0xFE	; 254
 882:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 886:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 88a:	3d 7f       	andi	r19, 0xFD	; 253
 88c:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 890:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 894:	31 60       	ori	r19, 0x01	; 1
 896:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 89a:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 89e:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 8a2:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 8a6:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 8aa:	27 fd       	sbrc	r18, 7
 8ac:	e5 cf       	rjmp	.-54     	; 0x878 <Endpoint_ConfigureEndpoint_Prv+0x26>
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	08 95       	ret
 8b2:	8f 70       	andi	r24, 0x0F	; 15
 8b4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	08 95       	ret

000008bc <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 8bc:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <USB_ControlRequest>
 8c0:	87 ff       	sbrs	r24, 7
 8c2:	11 c0       	rjmp	.+34     	; 0x8e6 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 8c8:	82 fd       	sbrc	r24, 2
 8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 8cc:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <USB_DeviceState>
 8d0:	81 11       	cpse	r24, r1
 8d2:	f8 cf       	rjmp	.-16     	; 0x8c4 <Endpoint_ClearStatusStage+0x8>
 8d4:	11 c0       	rjmp	.+34     	; 0x8f8 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 8d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8da:	8b 77       	andi	r24, 0x7B	; 123
 8dc:	0b c0       	rjmp	.+22     	; 0x8f4 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 8de:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <USB_DeviceState>
 8e2:	88 23       	and	r24, r24
 8e4:	49 f0       	breq	.+18     	; 0x8f8 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 8ea:	80 ff       	sbrs	r24, 0
 8ec:	f8 cf       	rjmp	.-16     	; 0x8de <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8f2:	8e 77       	andi	r24, 0x7E	; 126
 8f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8f8:	08 95       	ret

000008fa <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 8fa:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 8fe:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 902:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 904:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 908:	84 2f       	mov	r24, r20
 90a:	81 70       	andi	r24, 0x01	; 1
 90c:	40 ff       	sbrs	r20, 0
 90e:	23 c0       	rjmp	.+70     	; 0x956 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 910:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 914:	80 fd       	sbrc	r24, 0
 916:	1d c0       	rjmp	.+58     	; 0x952 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 918:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 91c:	88 23       	and	r24, r24
 91e:	99 f0       	breq	.+38     	; 0x946 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 920:	85 30       	cpi	r24, 0x05	; 5
 922:	99 f0       	breq	.+38     	; 0x94a <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 924:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 928:	85 fd       	sbrc	r24, 5
 92a:	11 c0       	rjmp	.+34     	; 0x94e <Endpoint_WaitUntilReady+0x54>
 92c:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 930:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 934:	24 17       	cp	r18, r20
 936:	35 07       	cpc	r19, r21
 938:	29 f3       	breq	.-54     	; 0x904 <Endpoint_WaitUntilReady+0xa>
 93a:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 93c:	11 f0       	breq	.+4      	; 0x942 <Endpoint_WaitUntilReady+0x48>
 93e:	9a 01       	movw	r18, r20
 940:	e1 cf       	rjmp	.-62     	; 0x904 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 942:	84 e0       	ldi	r24, 0x04	; 4
 944:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 946:	82 e0       	ldi	r24, 0x02	; 2
 948:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 94a:	83 e0       	ldi	r24, 0x03	; 3
 94c:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 956:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 95a:	42 ff       	sbrs	r20, 2
 95c:	dd cf       	rjmp	.-70     	; 0x918 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 95e:	08 95       	ret

00000960 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 960:	0f 93       	push	r16
 962:	1f 93       	push	r17
 964:	cf 93       	push	r28
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
 966:	df 93       	push	r29
 968:	4e d0       	rcall	.+156    	; 0xa06 <USB_INT_DisableAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 96a:	55 d0       	rcall	.+170    	; 0xa16 <USB_INT_ClearAllInterrupts>
 96c:	c8 ed       	ldi	r28, 0xD8	; 216
 96e:	d0 e0       	ldi	r29, 0x00	; 0
 970:	88 81       	ld	r24, Y
 972:	8f 77       	andi	r24, 0x7F	; 127
				USBCON |=  (1 << USBE);
 974:	88 83       	st	Y, r24
 976:	88 81       	ld	r24, Y
 978:	80 68       	ori	r24, 0x80	; 128
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 97a:	88 83       	st	Y, r24
 97c:	88 81       	ld	r24, Y
 97e:	8f 7d       	andi	r24, 0xDF	; 223

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 980:	88 83       	st	Y, r24
 982:	e7 ed       	ldi	r30, 0xD7	; 215
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	80 81       	ld	r24, Z
 988:	80 68       	ori	r24, 0x80	; 128
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 98a:	80 83       	st	Z, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 98c:	19 bc       	out	0x29, r1	; 41
 98e:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
 992:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 996:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 99a:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 99e:	00 ee       	ldi	r16, 0xE0	; 224
 9a0:	10 e0       	ldi	r17, 0x00	; 0
 9a2:	f8 01       	movw	r30, r16
 9a4:	80 81       	ld	r24, Z
 9a6:	8b 7f       	andi	r24, 0xFB	; 251
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 9a8:	80 83       	st	Z, r24
 9aa:	88 81       	ld	r24, Y
 9ac:	81 60       	ori	r24, 0x01	; 1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 9ae:	88 83       	st	Y, r24
 9b0:	42 e3       	ldi	r20, 0x32	; 50
 9b2:	60 e0       	ldi	r22, 0x00	; 0
 9b4:	80 e0       	ldi	r24, 0x00	; 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 9b6:	4d df       	rcall	.-358    	; 0x852 <Endpoint_ConfigureEndpoint_Prv>
 9b8:	e1 ee       	ldi	r30, 0xE1	; 225
 9ba:	f0 e0       	ldi	r31, 0x00	; 0
 9bc:	80 81       	ld	r24, Z
 9be:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 9c0:	80 83       	st	Z, r24
 9c2:	e2 ee       	ldi	r30, 0xE2	; 226
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	80 81       	ld	r24, Z
 9c8:	81 60       	ori	r24, 0x01	; 1
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 9ca:	80 83       	st	Z, r24
 9cc:	80 81       	ld	r24, Z
 9ce:	88 60       	ori	r24, 0x08	; 8
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 9d0:	80 83       	st	Z, r24
 9d2:	f8 01       	movw	r30, r16
 9d4:	80 81       	ld	r24, Z
 9d6:	8e 7f       	andi	r24, 0xFE	; 254

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 9d8:	80 83       	st	Z, r24
 9da:	88 81       	ld	r24, Y
 9dc:	80 61       	ori	r24, 0x10	; 16
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 9de:	88 83       	st	Y, r24
 9e0:	df 91       	pop	r29
 9e2:	cf 91       	pop	r28
 9e4:	1f 91       	pop	r17
 9e6:	0f 91       	pop	r16
 9e8:	08 95       	ret

000009ea <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 9ea:	e8 ed       	ldi	r30, 0xD8	; 216
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	80 81       	ld	r24, Z
 9f0:	8f 7e       	andi	r24, 0xEF	; 239
 9f2:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 9f4:	e7 ed       	ldi	r30, 0xD7	; 215
 9f6:	f0 e0       	ldi	r31, 0x00	; 0
 9f8:	80 81       	ld	r24, Z
 9fa:	81 60       	ori	r24, 0x01	; 1
 9fc:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <USB_IsInitialized>
 a04:	ad cf       	rjmp	.-166    	; 0x960 <USB_ResetInterface>

00000a06 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 a06:	e8 ed       	ldi	r30, 0xD8	; 216
 a08:	f0 e0       	ldi	r31, 0x00	; 0
 a0a:	80 81       	ld	r24, Z
 a0c:	8c 7f       	andi	r24, 0xFC	; 252
 a0e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 a10:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a14:	08 95       	ret

00000a16 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 a16:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 a1a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 a1e:	08 95       	ret

00000a20 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 a20:	1f 92       	push	r1
 a22:	0f 92       	push	r0
 a24:	0f b6       	in	r0, 0x3f	; 63
 a26:	0f 92       	push	r0
 a28:	11 24       	eor	r1, r1
 a2a:	0b b6       	in	r0, 0x3b	; 59
 a2c:	0f 92       	push	r0
 a2e:	2f 93       	push	r18
 a30:	3f 93       	push	r19
 a32:	4f 93       	push	r20
 a34:	5f 93       	push	r21
 a36:	6f 93       	push	r22
 a38:	7f 93       	push	r23
 a3a:	8f 93       	push	r24
 a3c:	9f 93       	push	r25
 a3e:	af 93       	push	r26
 a40:	bf 93       	push	r27
 a42:	ef 93       	push	r30
 a44:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 a46:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 a4a:	82 ff       	sbrs	r24, 2
 a4c:	0a c0       	rjmp	.+20     	; 0xa62 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 a4e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a52:	82 ff       	sbrs	r24, 2
 a54:	06 c0       	rjmp	.+12     	; 0xa62 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 a56:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 a5a:	8b 7f       	andi	r24, 0xFB	; 251
 a5c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 a60:	0a d2       	rcall	.+1044   	; 0xe76 <USB_Event_Stub>
 a62:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 a66:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 a68:	1d c0       	rjmp	.+58     	; 0xaa4 <__vector_10+0x84>
 a6a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 a6e:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 a70:	19 c0       	rjmp	.+50     	; 0xaa4 <__vector_10+0x84>
 a72:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 a76:	8e 7f       	andi	r24, 0xFE	; 254
 a78:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 a7c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 a80:	80 ff       	sbrs	r24, 0

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 a82:	0c c0       	rjmp	.+24     	; 0xa9c <__vector_10+0x7c>
 a84:	84 e1       	ldi	r24, 0x14	; 20
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 a86:	89 bd       	out	0x29, r24	; 41
 a88:	86 e1       	ldi	r24, 0x16	; 22
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 a8a:	89 bd       	out	0x29, r24	; 41
 a8c:	09 b4       	in	r0, 0x29	; 41
 a8e:	00 fe       	sbrs	r0, 0
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 a90:	fd cf       	rjmp	.-6      	; 0xa8c <__vector_10+0x6c>
 a92:	81 e0       	ldi	r24, 0x01	; 1
			EVENT_USB_Device_Connect();
 a94:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <USB_DeviceState>
 a98:	a2 db       	rcall	.-2236   	; 0x1de <EVENT_USB_Device_Connect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <__vector_10+0x84>
			EVENT_USB_Device_Disconnect();
 a9c:	19 bc       	out	0x29, r1	; 41
 a9e:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <USB_DeviceState>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 aa2:	9e db       	rcall	.-2244   	; 0x1e0 <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 aa4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 aa8:	80 ff       	sbrs	r24, 0
 aaa:	18 c0       	rjmp	.+48     	; 0xadc <__vector_10+0xbc>
 aac:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 ab0:	80 ff       	sbrs	r24, 0
 ab2:	14 c0       	rjmp	.+40     	; 0xadc <__vector_10+0xbc>
 ab4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 ab8:	8e 7f       	andi	r24, 0xFE	; 254
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 aba:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 abe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 ac2:	80 61       	ori	r24, 0x10	; 16
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 ac4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 ac8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 acc:	80 62       	ori	r24, 0x20	; 32

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 ace:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		EVENT_USB_Device_Suspend();
 ad2:	19 bc       	out	0x29, r1	; 41
 ad4:	85 e0       	ldi	r24, 0x05	; 5
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 ad6:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <USB_DeviceState>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 ada:	cd d1       	rcall	.+922    	; 0xe76 <USB_Event_Stub>
 adc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 ae0:	84 ff       	sbrs	r24, 4
 ae2:	2f c0       	rjmp	.+94     	; 0xb42 <__vector_10+0x122>
 ae4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 ae8:	84 ff       	sbrs	r24, 4
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 aea:	2b c0       	rjmp	.+86     	; 0xb42 <__vector_10+0x122>
 aec:	84 e1       	ldi	r24, 0x14	; 20
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 aee:	89 bd       	out	0x29, r24	; 41
 af0:	86 e1       	ldi	r24, 0x16	; 22
 af2:	89 bd       	out	0x29, r24	; 41
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 af4:	09 b4       	in	r0, 0x29	; 41
 af6:	00 fe       	sbrs	r0, 0
 af8:	fd cf       	rjmp	.-6      	; 0xaf4 <__vector_10+0xd4>
 afa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 afe:	8f 7d       	andi	r24, 0xDF	; 223
 b00:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 b04:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 b08:	8f 7e       	andi	r24, 0xEF	; 239
 b0a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 b0e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 b12:	8f 7e       	andi	r24, 0xEF	; 239
 b14:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 b18:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 b1c:	81 60       	ori	r24, 0x01	; 1
 b1e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 b22:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_Device_ConfigurationNumber>
		  USB_DeviceState = DEVICE_STATE_Configured;
 b26:	88 23       	and	r24, r24
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b28:	11 f0       	breq	.+4      	; 0xb2e <__vector_10+0x10e>
 b2a:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 b2c:	07 c0       	rjmp	.+14     	; 0xb3c <__vector_10+0x11c>
 b2e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 b32:	87 fd       	sbrc	r24, 7
 b34:	02 c0       	rjmp	.+4      	; 0xb3a <__vector_10+0x11a>
 b36:	81 e0       	ldi	r24, 0x01	; 1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 b38:	01 c0       	rjmp	.+2      	; 0xb3c <__vector_10+0x11c>
 b3a:	83 e0       	ldi	r24, 0x03	; 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 b3c:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <USB_DeviceState>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 b40:	9a d1       	rcall	.+820    	; 0xe76 <USB_Event_Stub>
 b42:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 b46:	83 ff       	sbrs	r24, 3
 b48:	22 c0       	rjmp	.+68     	; 0xb8e <__vector_10+0x16e>
 b4a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 b4e:	83 ff       	sbrs	r24, 3
 b50:	1e c0       	rjmp	.+60     	; 0xb8e <__vector_10+0x16e>
 b52:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 b56:	87 7f       	andi	r24, 0xF7	; 247
 b58:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		USB_Device_ConfigurationNumber = 0;
 b5c:	82 e0       	ldi	r24, 0x02	; 2
 b5e:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <USB_DeviceState>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 b62:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <USB_Device_ConfigurationNumber>
 b66:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 b6a:	8e 7f       	andi	r24, 0xFE	; 254
 b6c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 b70:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 b74:	8e 7f       	andi	r24, 0xFE	; 254
 b76:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 b7a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 b7e:	80 61       	ori	r24, 0x10	; 16
 b80:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 b84:	42 e3       	ldi	r20, 0x32	; 50
 b86:	60 e0       	ldi	r22, 0x00	; 0
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 b88:	80 e0       	ldi	r24, 0x00	; 0
 b8a:	63 de       	rcall	.-826    	; 0x852 <Endpoint_ConfigureEndpoint_Prv>
 b8c:	74 d1       	rcall	.+744    	; 0xe76 <USB_Event_Stub>
 b8e:	ff 91       	pop	r31
 b90:	ef 91       	pop	r30
 b92:	bf 91       	pop	r27
 b94:	af 91       	pop	r26
 b96:	9f 91       	pop	r25
 b98:	8f 91       	pop	r24
 b9a:	7f 91       	pop	r23
 b9c:	6f 91       	pop	r22
 b9e:	5f 91       	pop	r21
 ba0:	4f 91       	pop	r20
 ba2:	3f 91       	pop	r19
 ba4:	2f 91       	pop	r18
 ba6:	0f 90       	pop	r0
 ba8:	0b be       	out	0x3b, r0	; 59
 baa:	0f 90       	pop	r0
 bac:	0f be       	out	0x3f, r0	; 63
 bae:	0f 90       	pop	r0
 bb0:	1f 90       	pop	r1
 bb2:	18 95       	reti

00000bb4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 bb4:	1f 93       	push	r17
 bb6:	cf 93       	push	r28
 bb8:	df 93       	push	r29
 bba:	cd b7       	in	r28, 0x3d	; 61
 bbc:	de b7       	in	r29, 0x3e	; 62
 bbe:	aa 97       	sbiw	r28, 0x2a	; 42
 bc0:	0f b6       	in	r0, 0x3f	; 63
 bc2:	f8 94       	cli
 bc4:	de bf       	out	0x3e, r29	; 62
 bc6:	0f be       	out	0x3f, r0	; 63
 bc8:	cd bf       	out	0x3d, r28	; 61
 bca:	e6 ed       	ldi	r30, 0xD6	; 214
 bcc:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 bce:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 bd2:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 bd4:	21 e0       	ldi	r18, 0x01	; 1
 bd6:	ee 3d       	cpi	r30, 0xDE	; 222
 bd8:	f2 07       	cpc	r31, r18
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 bda:	c9 f7       	brne	.-14     	; 0xbce <USB_Device_ProcessControlRequest+0x1a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bdc:	0a db       	rcall	.-2540   	; 0x1f2 <EVENT_USB_Device_ControlRequest>
 bde:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 be2:	83 ff       	sbrs	r24, 3
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 be4:	30 c1       	rjmp	.+608    	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
 be6:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 bea:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <USB_ControlRequest+0x1>
 bee:	95 30       	cpi	r25, 0x05	; 5
 bf0:	09 f4       	brne	.+2      	; 0xbf4 <USB_Device_ProcessControlRequest+0x40>
 bf2:	83 c0       	rjmp	.+262    	; 0xcfa <USB_Device_ProcessControlRequest+0x146>
 bf4:	30 f4       	brcc	.+12     	; 0xc02 <USB_Device_ProcessControlRequest+0x4e>
 bf6:	91 30       	cpi	r25, 0x01	; 1
 bf8:	a9 f1       	breq	.+106    	; 0xc64 <USB_Device_ProcessControlRequest+0xb0>
 bfa:	68 f0       	brcs	.+26     	; 0xc16 <USB_Device_ProcessControlRequest+0x62>
 bfc:	93 30       	cpi	r25, 0x03	; 3
 bfe:	91 f1       	breq	.+100    	; 0xc64 <USB_Device_ProcessControlRequest+0xb0>
 c00:	22 c1       	rjmp	.+580    	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
 c02:	98 30       	cpi	r25, 0x08	; 8
 c04:	09 f4       	brne	.+2      	; 0xc08 <USB_Device_ProcessControlRequest+0x54>
 c06:	ef c0       	rjmp	.+478    	; 0xde6 <USB_Device_ProcessControlRequest+0x232>
 c08:	99 30       	cpi	r25, 0x09	; 9
 c0a:	09 f4       	brne	.+2      	; 0xc0e <USB_Device_ProcessControlRequest+0x5a>
 c0c:	fb c0       	rjmp	.+502    	; 0xe04 <USB_Device_ProcessControlRequest+0x250>
 c0e:	96 30       	cpi	r25, 0x06	; 6
 c10:	09 f0       	breq	.+2      	; 0xc14 <USB_Device_ProcessControlRequest+0x60>
 c12:	19 c1       	rjmp	.+562    	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c14:	94 c0       	rjmp	.+296    	; 0xd3e <USB_Device_ProcessControlRequest+0x18a>
 c16:	80 38       	cpi	r24, 0x80	; 128
 c18:	21 f0       	breq	.+8      	; 0xc22 <USB_Device_ProcessControlRequest+0x6e>
 c1a:	82 38       	cpi	r24, 0x82	; 130
 c1c:	09 f0       	breq	.+2      	; 0xc20 <USB_Device_ProcessControlRequest+0x6c>
 c1e:	13 c1       	rjmp	.+550    	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 c20:	08 c0       	rjmp	.+16     	; 0xc32 <USB_Device_ProcessControlRequest+0x7e>
 c22:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 c26:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <USB_Device_RemoteWakeupEnabled>
 c2a:	99 23       	and	r25, r25
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 c2c:	89 f0       	breq	.+34     	; 0xc50 <USB_Device_ProcessControlRequest+0x9c>
 c2e:	82 60       	ori	r24, 0x02	; 2
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 c30:	0f c0       	rjmp	.+30     	; 0xc50 <USB_Device_ProcessControlRequest+0x9c>
 c32:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <USB_ControlRequest+0x4>

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 c36:	8f 70       	andi	r24, 0x0F	; 15
 c38:	87 30       	cpi	r24, 0x07	; 7
 c3a:	08 f0       	brcs	.+2      	; 0xc3e <USB_Device_ProcessControlRequest+0x8a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c3c:	04 c1       	rjmp	.+520    	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
 c3e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 c42:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
 c46:	85 fb       	bst	r24, 5
 c48:	88 27       	eor	r24, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c4a:	80 f9       	bld	r24, 0
 c4c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c50:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c54:	97 7f       	andi	r25, 0xF7	; 247
 c56:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 c5a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 c5e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c62:	cc c0       	rjmp	.+408    	; 0xdfc <USB_Device_ProcessControlRequest+0x248>
 c64:	28 2f       	mov	r18, r24
 c66:	2d 7f       	andi	r18, 0xFD	; 253
 c68:	09 f0       	breq	.+2      	; 0xc6c <USB_Device_ProcessControlRequest+0xb8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 c6a:	ed c0       	rjmp	.+474    	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
 c6c:	88 23       	and	r24, r24
 c6e:	19 f0       	breq	.+6      	; 0xc76 <USB_Device_ProcessControlRequest+0xc2>
 c70:	82 30       	cpi	r24, 0x02	; 2
 c72:	61 f0       	breq	.+24     	; 0xc8c <USB_Device_ProcessControlRequest+0xd8>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 c74:	e8 c0       	rjmp	.+464    	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
 c76:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <USB_ControlRequest+0x2>
 c7a:	81 30       	cpi	r24, 0x01	; 1
 c7c:	09 f0       	breq	.+2      	; 0xc80 <USB_Device_ProcessControlRequest+0xcc>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 c7e:	e3 c0       	rjmp	.+454    	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
 c80:	93 30       	cpi	r25, 0x03	; 3
 c82:	09 f0       	breq	.+2      	; 0xc86 <USB_Device_ProcessControlRequest+0xd2>
 c84:	80 e0       	ldi	r24, 0x00	; 0
 c86:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <USB_Device_RemoteWakeupEnabled>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 c8a:	2e c0       	rjmp	.+92     	; 0xce8 <USB_Device_ProcessControlRequest+0x134>
 c8c:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <USB_ControlRequest+0x2>
 c90:	81 11       	cpse	r24, r1
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 c92:	2a c0       	rjmp	.+84     	; 0xce8 <USB_Device_ProcessControlRequest+0x134>
 c94:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <USB_ControlRequest+0x4>

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 c98:	8f 70       	andi	r24, 0x0F	; 15
 c9a:	2f ef       	ldi	r18, 0xFF	; 255
 c9c:	28 0f       	add	r18, r24
 c9e:	26 30       	cpi	r18, 0x06	; 6
 ca0:	08 f0       	brcs	.+2      	; 0xca4 <USB_Device_ProcessControlRequest+0xf0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ca2:	d1 c0       	rjmp	.+418    	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
 ca4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 ca8:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 cac:	20 ff       	sbrs	r18, 0
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 cae:	1c c0       	rjmp	.+56     	; 0xce8 <USB_Device_ProcessControlRequest+0x134>
 cb0:	93 30       	cpi	r25, 0x03	; 3
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 cb2:	21 f4       	brne	.+8      	; 0xcbc <USB_Device_ProcessControlRequest+0x108>
 cb4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 cb8:	80 62       	ori	r24, 0x20	; 32
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 cba:	14 c0       	rjmp	.+40     	; 0xce4 <USB_Device_ProcessControlRequest+0x130>
 cbc:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 cc0:	90 61       	ori	r25, 0x10	; 16
 cc2:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 cc6:	21 e0       	ldi	r18, 0x01	; 1
 cc8:	30 e0       	ldi	r19, 0x00	; 0
 cca:	a9 01       	movw	r20, r18
 ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <USB_Device_ProcessControlRequest+0x11e>
 cce:	44 0f       	add	r20, r20
 cd0:	55 1f       	adc	r21, r21
 cd2:	8a 95       	dec	r24
 cd4:	e2 f7       	brpl	.-8      	; 0xcce <USB_Device_ProcessControlRequest+0x11a>
 cd6:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 cda:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 cde:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 ce2:	88 60       	ori	r24, 0x08	; 8
 ce4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ce8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cf0:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 cf2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cf6:	e2 dd       	rcall	.-1084   	; 0x8bc <Endpoint_ClearStatusStage>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 cf8:	a6 c0       	rjmp	.+332    	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
 cfa:	81 11       	cpse	r24, r1
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 cfc:	a4 c0       	rjmp	.+328    	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
 cfe:	10 91 d8 01 	lds	r17, 0x01D8	; 0x8001d8 <USB_ControlRequest+0x2>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 d02:	1f 77       	andi	r17, 0x7F	; 127
 d04:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 d08:	80 78       	andi	r24, 0x80	; 128
 d0a:	81 2b       	or	r24, r17
 d0c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 d10:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d14:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 d16:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d1a:	d0 dd       	rcall	.-1120   	; 0x8bc <Endpoint_ClearStatusStage>
 d1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 d20:	80 ff       	sbrs	r24, 0
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 d22:	fc cf       	rjmp	.-8      	; 0xd1c <USB_Device_ProcessControlRequest+0x168>
 d24:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 d28:	80 68       	ori	r24, 0x80	; 128
 d2a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 d2e:	11 11       	cpse	r17, r1
 d30:	02 c0       	rjmp	.+4      	; 0xd36 <USB_Device_ProcessControlRequest+0x182>
 d32:	82 e0       	ldi	r24, 0x02	; 2
 d34:	01 c0       	rjmp	.+2      	; 0xd38 <USB_Device_ProcessControlRequest+0x184>
 d36:	83 e0       	ldi	r24, 0x03	; 3
 d38:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <USB_DeviceState>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 d3c:	84 c0       	rjmp	.+264    	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
 d3e:	80 58       	subi	r24, 0x80	; 128
 d40:	82 30       	cpi	r24, 0x02	; 2
 d42:	08 f0       	brcs	.+2      	; 0xd46 <USB_Device_ProcessControlRequest+0x192>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 d44:	80 c0       	rjmp	.+256    	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
 d46:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <USB_ControlRequest+0x2>
 d4a:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <USB_ControlRequest+0x3>
 d4e:	8c 3d       	cpi	r24, 0xDC	; 220
 d50:	53 e0       	ldi	r21, 0x03	; 3
 d52:	95 07       	cpc	r25, r21
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 d54:	71 f5       	brne	.+92     	; 0xdb2 <USB_Device_ProcessControlRequest+0x1fe>
 d56:	83 e0       	ldi	r24, 0x03	; 3
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 d58:	8a 83       	std	Y+2, r24	; 0x02
 d5a:	8a e2       	ldi	r24, 0x2A	; 42
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 d5c:	89 83       	std	Y+1, r24	; 0x01
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 d5e:	4f b7       	in	r20, 0x3f	; 63
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 d60:	f8 94       	cli
 d62:	de 01       	movw	r26, r28
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 d64:	13 96       	adiw	r26, 0x03	; 3
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 d66:	20 e0       	ldi	r18, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 d68:	3e e0       	ldi	r19, 0x0E	; 14
 d6a:	51 e2       	ldi	r21, 0x21	; 33
 d6c:	e3 2f       	mov	r30, r19
 d6e:	f0 e0       	ldi	r31, 0x00	; 0
 d70:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>

					if (SerialCharNum & 0x01)
 d74:	e4 91       	lpm	r30, Z
 d76:	20 ff       	sbrs	r18, 0
					{
						SerialByte >>= 4;
 d78:	03 c0       	rjmp	.+6      	; 0xd80 <USB_Device_ProcessControlRequest+0x1cc>
 d7a:	e2 95       	swap	r30
						SigReadAddress++;
 d7c:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
 d7e:	3f 5f       	subi	r19, 0xFF	; 255
 d80:	ef 70       	andi	r30, 0x0F	; 15
 d82:	8e 2f       	mov	r24, r30

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 d84:	90 e0       	ldi	r25, 0x00	; 0
 d86:	ea 30       	cpi	r30, 0x0A	; 10
 d88:	10 f0       	brcs	.+4      	; 0xd8e <USB_Device_ProcessControlRequest+0x1da>
 d8a:	c7 96       	adiw	r24, 0x37	; 55
 d8c:	01 c0       	rjmp	.+2      	; 0xd90 <USB_Device_ProcessControlRequest+0x1dc>
 d8e:	c0 96       	adiw	r24, 0x30	; 48
 d90:	8d 93       	st	X+, r24
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 d92:	9d 93       	st	X+, r25
 d94:	2f 5f       	subi	r18, 0xFF	; 255
 d96:	24 31       	cpi	r18, 0x14	; 20
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 d98:	49 f7       	brne	.-46     	; 0xd6c <USB_Device_ProcessControlRequest+0x1b8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d9a:	4f bf       	out	0x3f, r20	; 63
 d9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 da0:	87 7f       	andi	r24, 0xF7	; 247
 da2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 da6:	6a e2       	ldi	r22, 0x2A	; 42
 da8:	70 e0       	ldi	r23, 0x00	; 0
 daa:	ce 01       	movw	r24, r28
 dac:	01 96       	adiw	r24, 0x01	; 1
 dae:	94 dc       	rcall	.-1752   	; 0x6d8 <Endpoint_Write_Control_Stream_LE>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 db0:	14 c0       	rjmp	.+40     	; 0xdda <USB_Device_ProcessControlRequest+0x226>
 db2:	60 91 da 01 	lds	r22, 0x01DA	; 0x8001da <USB_ControlRequest+0x4>
 db6:	70 91 db 01 	lds	r23, 0x01DB	; 0x8001db <USB_ControlRequest+0x5>
 dba:	ae 01       	movw	r20, r28
 dbc:	4f 5f       	subi	r20, 0xFF	; 255
 dbe:	5f 4f       	sbci	r21, 0xFF	; 255
 dc0:	b6 db       	rcall	.-2196   	; 0x52e <CALLBACK_USB_GetDescriptor>
 dc2:	bc 01       	movw	r22, r24
 dc4:	89 2b       	or	r24, r25
 dc6:	09 f4       	brne	.+2      	; 0xdca <USB_Device_ProcessControlRequest+0x216>
 dc8:	3e c0       	rjmp	.+124    	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
 dca:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 dce:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 dd0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 dd4:	89 81       	ldd	r24, Y+1	; 0x01
 dd6:	9a 81       	ldd	r25, Y+2	; 0x02
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 dd8:	dc dc       	rcall	.-1608   	; 0x792 <Endpoint_Write_Control_PStream_LE>
 dda:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 dde:	8b 77       	andi	r24, 0x7B	; 123
 de0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 de4:	30 c0       	rjmp	.+96     	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
 de6:	80 38       	cpi	r24, 0x80	; 128
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 de8:	71 f5       	brne	.+92     	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
 dea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 dee:	87 7f       	andi	r24, 0xF7	; 247
 df0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 df4:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 df8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 dfc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e00:	8e 77       	andi	r24, 0x7E	; 126
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 e02:	77 cf       	rjmp	.-274    	; 0xcf2 <USB_Device_ProcessControlRequest+0x13e>
 e04:	81 11       	cpse	r24, r1
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 e06:	1f c0       	rjmp	.+62     	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
 e08:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <USB_ControlRequest+0x2>
 e0c:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <USB_ControlRequest+0x3>
 e10:	99 27       	eor	r25, r25
 e12:	02 97       	sbiw	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e14:	c4 f4       	brge	.+48     	; 0xe46 <USB_Device_ProcessControlRequest+0x292>
 e16:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e1a:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 e1c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e20:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <USB_ControlRequest+0x2>

	Endpoint_ClearStatusStage();
 e24:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <USB_Device_ConfigurationNumber>

	if (USB_Device_ConfigurationNumber)
 e28:	49 dd       	rcall	.-1390   	; 0x8bc <Endpoint_ClearStatusStage>
 e2a:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_Device_ConfigurationNumber>
 e2e:	81 11       	cpse	r24, r1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 e30:	06 c0       	rjmp	.+12     	; 0xe3e <USB_Device_ProcessControlRequest+0x28a>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 e32:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 e36:	87 fd       	sbrc	r24, 7
 e38:	02 c0       	rjmp	.+4      	; 0xe3e <USB_Device_ProcessControlRequest+0x28a>
 e3a:	81 e0       	ldi	r24, 0x01	; 1
 e3c:	01 c0       	rjmp	.+2      	; 0xe40 <USB_Device_ProcessControlRequest+0x28c>

	EVENT_USB_Device_ConfigurationChanged();
 e3e:	84 e0       	ldi	r24, 0x04	; 4
 e40:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <USB_DeviceState>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e44:	ce d9       	rcall	.-3172   	; 0x1e2 <EVENT_USB_Device_ConfigurationChanged>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 e46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e4a:	83 ff       	sbrs	r24, 3
 e4c:	0a c0       	rjmp	.+20     	; 0xe62 <USB_Device_ProcessControlRequest+0x2ae>
 e4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e52:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 e54:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e58:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 e5c:	80 62       	ori	r24, 0x20	; 32
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 e5e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 e62:	aa 96       	adiw	r28, 0x2a	; 42
 e64:	0f b6       	in	r0, 0x3f	; 63
 e66:	f8 94       	cli
 e68:	de bf       	out	0x3e, r29	; 62
 e6a:	0f be       	out	0x3f, r0	; 63
 e6c:	cd bf       	out	0x3d, r28	; 61
 e6e:	df 91       	pop	r29
 e70:	cf 91       	pop	r28
 e72:	1f 91       	pop	r17
 e74:	08 95       	ret

00000e76 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 e76:	08 95       	ret

00000e78 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 e78:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 e7a:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <USB_DeviceState>
 e7e:	88 23       	and	r24, r24
 e80:	99 f0       	breq	.+38     	; 0xea8 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 e82:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 e86:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 e88:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 e8c:	89 2f       	mov	r24, r25
 e8e:	81 70       	andi	r24, 0x01	; 1
 e90:	90 fd       	sbrc	r25, 0
 e92:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 e94:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e96:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
 e9e:	83 fd       	sbrc	r24, 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ea0:	89 de       	rcall	.-750    	; 0xbb4 <USB_Device_ProcessControlRequest>
 ea2:	cf 70       	andi	r28, 0x0F	; 15
 ea4:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 ea8:	cf 91       	pop	r28
 eaa:	08 95       	ret

00000eac <_exit>:
 eac:	f8 94       	cli

00000eae <__stop_program>:
 eae:	ff cf       	rjmp	.-2      	; 0xeae <__stop_program>
